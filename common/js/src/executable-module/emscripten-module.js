/** @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview This file contains helper definitions that can be used for
 * loading and interacting with an Emscripten/WebAssembly module.
 */

goog.provide('GoogleSmartCard.EmscriptenModule');

goog.require('GoogleSmartCard.Logging');
goog.require('GoogleSmartCard.TypedMessage');
goog.require('goog.Disposable');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.log.Logger');
goog.require('goog.net.jsloader');
goog.require('goog.string.Const');

goog.scope(function() {

const GSC = GoogleSmartCard;

const LOGGER_SCOPE = 'EmscriptenModule';
const WRAPPER_SUBLOGGER_SCOPE = 'Wrapper';

/**
 * Class that allows to load and run the Emscripten module with the given name
 * and exchange messages with it.
 * @constructor
 * @extends goog.Disposable
 */
GSC.EmscriptenModule = function(moduleName) {
  EmscriptenModule.base(this, 'constructor');

  /** @type {string} @const */
  this.moduleName_ = moduleName;
  /** @type {!goog.log.Logger} @const */
  this.fromModuleMessagesLogger_ = GSC.Logging.getScopedLogger(LOGGER_SCOPE);
  /** @type {!goog.log.Logger} @const */
  this.logger = GSC.Logging.getChildLogger(
      this.fromModuleMessagesLogger_, WRAPPER_SUBLOGGER_SCOPE);
  // Object that is an entry point on the C++ side and is used for exchanging
  // messages with it. Untyped, since the class "GoogleSmartCardModule" is
  // defined within the Emscripten module (using Embind) and therefore isn't
  // known to Closure Compiler.
  this.googleSmartCardModule_ = null;
};

const EmscriptenModule = GSC.EmscriptenModule;
goog.inherits(EmscriptenModule, goog.Disposable);

/**
 * Starts loading the Emscripten module.
 */
EmscriptenModule.prototype.startLoading = function() {
  this.load_().catch((e) => {
    this.logger.warning('Failed to load the Emscripten module: ' + e);
    this.dispose();
  });
};

/** @override */
EmscriptenModule.prototype.disposeInternal = function() {
  this.logger.fine('Disposed');
  delete this.googleSmartCardModule_;
  EmscriptenModule.base(this, 'disposeInternal');
};

/**
 * Asynchronously loads and executes the Emscripten module.
 * @return {!Promise<void>}
 * @private
 */
EmscriptenModule.prototype.load_ = async function() {
  // First step: Asynchronously load the JS file containing the runtime support
  // code autogenerated by Emscripten. By convention (see build rules in
  // //common/make/internal/executable_building_emscripten.mk), the file's base
  // name is the module name.
  const jsUrl = goog.html.TrustedResourceUrl.format(goog.string.Const.from(
      '/%{moduleName}.js'), {'moduleName': this.moduleName_});
  await goog.net.jsloader.safeLoad(jsUrl);

  // Second step: Run the factory function that asynchronously loads the
  // Emscripten module and creates the Emscripten API's Module object. By
  // convention (see the EXPORT_NAME parameter in
  // //common/make/internal/executable_building_emscripten.mk), the function has
  // a specific name based on the module name.
  const factoryFunction = goog.global[
      `loadEmscriptenModule_${this.moduleName_}`];
  GSC.Logging.checkWithLogger(this.logger, factoryFunction,
                              'Emscripten factory function not defined');
  // TODO(#220): Handle module crashes.
  const emscriptenApiModule = await factoryFunction();

  // Third step: Create the object that serves as an entry point on the C++
  // side and is used for exchanging messages with it. By convention (see the
  // entry_point_emscripten.cc files), the class is named GoogleSmartCardModule.
  const GoogleSmartCardModule = emscriptenApiModule['GoogleSmartCardModule'];
  GSC.Logging.checkWithLogger(this.logger, GoogleSmartCardModule,
                              'GoogleSmartCardModule class not defined');
  this.googleSmartCardModule_ = new GoogleSmartCardModule((message) => {
    // TODO(#220): Implement handling of messages received from the module.
  });
};

});  // goog.scope
