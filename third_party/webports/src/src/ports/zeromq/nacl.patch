diff --git a/Makefile.in b/Makefile.in
--- a/Makefile.in
+++ b/Makefile.in
@@ -338,9 +338,9 @@ top_build_prefix = @top_build_prefix@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
 ACLOCAL_AMFLAGS = -I config
-@BUILD_PGM_FALSE@SUBDIRS = src doc perf tests tools
-@BUILD_PGM_TRUE@SUBDIRS = foreign/openpgm src doc perf tests tools
-DIST_SUBDIRS = foreign/openpgm src doc perf tests tools builds/msvc
+@BUILD_PGM_FALSE@SUBDIRS = src
+@BUILD_PGM_TRUE@SUBDIRS = src
+DIST_SUBDIRS = src
 EXTRA_DIST = \
 	autogen.sh	\
 	version.sh	\
diff --git a/configure b/configure
--- a/configure
+++ b/configure
@@ -7032,7 +7032,7 @@ irix5* | irix6* | nonstopux*)
   ;;
 
 # This must be glibc/ELF.
-linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)
+linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu* | nacl* | nacl*)
   lt_cv_deplibs_check_method=pass_all
   ;;
 
@@ -12488,6 +12488,17 @@ uts4*)
   shlibpath_var=LD_LIBRARY_PATH
   ;;
 
+nacl)
+  if $CC -v 2>&1 | grep -q enable-shared; then
+    dynamic_linker="GNU/NaCl ld.so"
+    version_type=linux
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+  else
+    dynamic_linker=no
+  fi
+  ;;
+
 *)
   dynamic_linker=no
   ;;
@@ -16320,6 +16331,17 @@ uts4*)
   shlibpath_var=LD_LIBRARY_PATH
   ;;
 
+nacl)
+  if $CC -v 2>&1 | grep -q enable-shared; then
+    dynamic_linker="GNU/NaCl ld.so"
+    version_type=linux
+    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'
+    soname_spec='${libname}${release}${shared_ext}$major'
+  else
+    dynamic_linker=no
+  fi
+  ;;
+
 *)
   dynamic_linker=no
   ;;
@@ -16975,7 +16997,9 @@ CPPFLAGS="-D_REENTRANT -D_THREAD_SAFE $CPPFLAGS"
 
 # OS-specific tests
 case "${host_os}" in
-    *linux*)
+    *linux* | *nacl*)
+        libzmq_pedantic="no"
+        libzmq_werror="no"
         # Define on Linux to enable all library features. Define if using a gnu compiler
         if test "x$GXX" = "xyes"; then
             CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
diff --git a/src/signaler.cpp b/src/signaler.cpp
--- a/src/signaler.cpp
+++ b/src/signaler.cpp
@@ -71,6 +71,7 @@
 #include "windows.hpp"
 #else
 #include <unistd.h>
+#include <netinet/in.h>
 #include <netinet/tcp.h>
 #include <unistd.h>
 #include <sys/types.h>
diff --git a/src/tcp_address.cpp b/src/tcp_address.cpp
--- a/src/tcp_address.cpp
+++ b/src/tcp_address.cpp
@@ -205,6 +205,58 @@ int zmq::tcp_address_t::resolve_nic_name (const char *nic_, bool ipv6_)
 
 #endif
 
+#ifdef __native_client__
+
+// TODO(sbc): Remove these functions when #315197 is closed.
+
+int gethostname(char *name, size_t len) {
+  strncpy(name, "localhost", len);
+  return 0;
+}
+
+int getaddrinfo(const char *node, const char *service,
+    const struct addrinfo *hints,
+    struct addrinfo **res) {
+  struct hostent* h = gethostbyname(node);
+  if (!h)
+    return EAI_FAIL;
+
+  struct sockaddr_in* addr = (struct sockaddr_in*) malloc(sizeof(struct sockaddr_in));
+  addr->sin_family = h->h_addrtype;
+  addr->sin_port = htons(atoi(service));
+  memcpy(&addr->sin_addr, h->h_addr_list[0], h->h_length);
+
+  struct addrinfo* info = (struct addrinfo*) malloc(sizeof(struct addrinfo));
+  info->ai_flags = 0;
+  info->ai_family = addr->sin_family;
+  info->ai_socktype = hints->ai_socktype;
+  info->ai_protocol = hints->ai_protocol;
+  info->ai_canonname = h->h_name;
+  info->ai_addrlen = sizeof(*addr);
+  info->ai_addr = (struct sockaddr*)addr;
+  info->ai_next = NULL;
+  *res = info;
+  return 0;
+}
+
+int getnameinfo(const struct sockaddr *sa, socklen_t salen,
+    char *host, socklen_t hostlen,
+    char *serv, socklen_t servlen, unsigned int flags) {
+  if (sa->sa_family != AF_INET)
+    return -1;
+  const struct sockaddr_in* addr = (const struct sockaddr_in*)sa;
+  if (host)
+    strncpy(host, inet_ntoa(addr->sin_addr), hostlen);
+  if (serv)
+    snprintf(serv, servlen, "%d", ntohs(addr->sin_port));
+  return 0;
+}
+
+void freeaddrinfo(struct addrinfo *res) {
+  free(res->ai_addr);
+  free(res);
+}
+#endif
 int zmq::tcp_address_t::resolve_interface (const char *interface_, bool ipv6_)
 {
     //  Initialize temporary output pointers with storage address.
diff --git a/src/thread.cpp b/src/thread.cpp
--- a/src/thread.cpp
+++ b/src/thread.cpp
@@ -67,7 +67,7 @@ extern "C"
 {
     static void *thread_routine (void *arg_)
     {
-#if !defined ZMQ_HAVE_OPENVMS && !defined ZMQ_HAVE_ANDROID
+#if !defined ZMQ_HAVE_OPENVMS && !defined ZMQ_HAVE_ANDROID && !defined __native_client__
         //  Following code will guarantee more predictable latencies as it'll
         //  disallow any signal handling in the I/O thread.
         sigset_t signal_set;
