diff --git a/include/dos_inc.h b/include/dos_inc.h
--- a/include/dos_inc.h
+++ b/include/dos_inc.h
@@ -28,6 +28,8 @@
 #include "mem.h"
 #endif
 
+#include <cstddef>
+
 #ifdef _MSC_VER
 #pragma pack (1)
 #endif
diff --git a/include/setup.h b/include/setup.h
--- a/include/setup.h
+++ b/include/setup.h
@@ -21,6 +21,8 @@
 #ifndef DOSBOX_SETUP_H
 #define DOSBOX_SETUP_H
 
+#include <stdio.h>
+
 #ifdef _MSC_VER
 #pragma warning ( disable : 4786 )
 #pragma warning ( disable : 4290 )
diff --git a/src/cpu/core_dyn_x86/risc_x86.h b/src/cpu/core_dyn_x86/risc_x86.h
--- a/src/cpu/core_dyn_x86/risc_x86.h
+++ b/src/cpu/core_dyn_x86/risc_x86.h
@@ -134,7 +134,11 @@ return_address:
 		"pushl %%ebp						\n"
 		"pushl $(run_return_adress)			\n"
 		"pushl  %2							\n"
+#ifndef __native_client__
 		"jmp  *%3							\n"
+#else
+		"nacljmp  %3							\n"
+#endif
 		"run_return_adress:					\n"
 		"popl %%ebp							\n"
 		:"=a" (retval), "=c" (tempflags)
@@ -1068,5 +1072,3 @@ static void gen_init(void) {
 	x86gen.regs[X86_REG_ESI]=new GenReg(6);
 	x86gen.regs[X86_REG_EDI]=new GenReg(7);
 }
-
-
diff --git a/src/gui/sdl_mapper.cpp b/src/gui/sdl_mapper.cpp
--- a/src/gui/sdl_mapper.cpp
+++ b/src/gui/sdl_mapper.cpp
@@ -360,7 +360,91 @@ static SDLKey sdlkey_map[]={
    expression will raise a compiler error if the condition is false.  */
 typedef char assert_right_size [MAX_SCANCODES == (sizeof(sdlkey_map)/sizeof(sdlkey_map[0]))	? 1 : -1];
 
-#else // !MACOSX
+#elif defined(__native_client__)
+
+#define MAX_SCANCODES 256
+static SDLKey sdlkey_map[MAX_SCANCODES] = {
+/*   0 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		SDLK_BACKSPACE,	SDLK_TAB,
+/*  10 */
+Z,		Z,		Z,		SDLK_RETURN,	Z,
+Z,		SDLK_LSHIFT,	SDLK_LCTRL,	SDLK_LALT,	SDLK_PAUSE,
+/*  20 */
+SDLK_CAPSLOCK,	Z,		Z,		Z,		Z,
+Z,		Z,		SDLK_ESCAPE,	Z,		Z,
+/*  30 */
+Z,		Z,		SDLK_SPACE,	SDLK_PAGEUP,	SDLK_PAGEDOWN,
+SDLK_END,	SDLK_HOME,	SDLK_LEFT,	SDLK_UP,	SDLK_RIGHT,
+/*  40 */
+SDLK_DOWN,	Z,		SDLK_PRINT,	Z,		Z,
+SDLK_INSERT,	SDLK_DELETE,	Z,		SDLK_0,		SDLK_1,
+/*  50 */
+SDLK_2,		SDLK_3,		SDLK_4,		SDLK_5,		SDLK_6,
+SDLK_7,		SDLK_8,		SDLK_9,		Z,		Z,
+/*  60 */
+Z,		Z,		Z,		Z,		Z,
+SDLK_a,		SDLK_b,		SDLK_c,		SDLK_d,		SDLK_e,
+/*  70 */
+SDLK_f,		SDLK_g,		SDLK_h,		SDLK_i,		SDLK_j,
+SDLK_k,		SDLK_l,		SDLK_m,		SDLK_n,		SDLK_o,
+/*  80 */
+SDLK_p,		SDLK_q,		SDLK_r,		SDLK_s,		SDLK_t,
+SDLK_u,		SDLK_v,		SDLK_w,		SDLK_x,		SDLK_y,
+/*  90 */
+SDLK_z,		SDLK_LSUPER,	SDLK_RSUPER,	SDLK_MENU,	Z,
+Z,		SDLK_KP0,	SDLK_KP1,	SDLK_KP2,	SDLK_KP3,
+/* 100 */
+SDLK_KP4,	SDLK_KP5,	SDLK_KP6,	SDLK_KP7,	SDLK_KP8,
+SDLK_KP9,	SDLK_KP_MULTIPLY, SDLK_KP_PLUS,	Z,		SDLK_KP_MINUS,
+/* 110 */
+SDLK_KP_PERIOD,	SDLK_KP_DIVIDE,	SDLK_F1,	SDLK_F2,	SDLK_F3,
+SDLK_F4,	SDLK_F5,	SDLK_F6,	SDLK_F7,	SDLK_F8,
+/* 120 */
+SDLK_F9,	SDLK_F10,	SDLK_F11,	SDLK_F12,	Z,
+Z,		Z,		Z,		Z,		Z,
+/* 130 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 140 */
+Z,		Z,		Z,		Z,		SDLK_NUMLOCK,
+SDLK_SCROLLOCK,	Z,		Z,		Z,		Z,
+/* 150 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 160 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 170 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 180 */
+Z,		Z,		Z,		Z,		Z,
+Z,		SDLK_SEMICOLON,	SDLK_EQUALS,	SDLK_COMMA,	SDLK_MINUS,
+/* 190 */
+SDLK_PERIOD,	SDLK_SLASH,	SDLK_BACKQUOTE,	Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 200 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 210 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		SDLK_LEFTBRACKET,
+/* 220 */
+SDLK_BACKSLASH,	SDLK_RIGHTBRACKET, SDLK_QUOTE,	Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 230 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 240 */
+Z,		Z,		Z,		Z,		Z,
+Z,		Z,		Z,		Z,		Z,
+/* 250 */
+Z,		Z,		Z,		Z,		Z,
+Z
+};
+
+#else // !MACOSX && !__native_client__
 
 #define MAX_SCANCODES 212
 static SDLKey sdlkey_map[MAX_SCANCODES]={SDLK_UNKNOWN,SDLK_ESCAPE,
@@ -415,7 +499,7 @@ Bitu GetKeyCode(SDL_keysym keysym) {
 			/* try to retrieve key from symbolic key as scancode is zero */
 			if (keysym.sym<MAX_SDLKEYS) key=scancode_map[(Bitu)keysym.sym];
 		} 
-#if !defined (WIN32) && !defined (MACOSX) && !defined(OS2)
+#if !defined (WIN32) && !defined (MACOSX) && !defined(OS2) && !defined (__native_client__)
 		/* Linux adds 8 to all scancodes */
 		else key-=8;
 #endif
@@ -2401,7 +2485,7 @@ void MAPPER_StartUp(Section * sec) {
 		usescancodes=true;
 
 		/* Note: table has to be tested/updated for various OSs */
-#if defined (MACOSX)
+#if defined (MACOSX) || defined(__native_client__)
 		/* nothing */
 #elif defined(OS2)
 		sdlkey_map[0x61]=SDLK_UP;
diff --git a/src/gui/sdlmain.cpp b/src/gui/sdlmain.cpp
--- a/src/gui/sdlmain.cpp
+++ b/src/gui/sdlmain.cpp
@@ -1743,7 +1743,10 @@ int main(int argc, char* argv[]) {
 #if SDL_VERSION_ATLEAST(1, 2, 14)
 	putenv(const_cast<char*>("SDL_DISABLE_LOCK_KEYS=1"));
 #endif
-	if ( SDL_Init( SDL_INIT_AUDIO|SDL_INIT_VIDEO|SDL_INIT_TIMER|SDL_INIT_CDROM
+	if ( SDL_Init( SDL_INIT_AUDIO|SDL_INIT_VIDEO|SDL_INIT_TIMER
+#ifndef __native_client__
+		|SDL_INIT_CDROM  /* nacl-SDL is not built with CDROM */
+#endif  /* __native_client__ */
 		|SDL_INIT_NOPARACHUTE
 		) < 0 ) E_Exit("Can't init SDL %s",SDL_GetError());
 	sdl.inited = true;
@@ -1899,6 +1902,22 @@ int main(int argc, char* argv[]) {
 	return 0;
 }
 
+#if defined(__native_client__) && defined(_NEWLIB_VERSION)
+#include <libgen.h>
+#include <assert.h>
+
+// Horrible hack to ensure that _execve is pulled out of libnosys.a
+// TODO(sbc): Remove this once libnosys is rolled in libnacl
+extern "C" void* _execve;
+void* foo = (void*)_execve;
+
+char *dirname(char *path) {
+  fprintf(stderr, "ERROR: %s is not implemented\n", __func__);
+  assert(0);
+  return NULL;
+}
+#endif
+
 void GFX_GetSize(int &width, int &height, bool &fullscreen) {
 	width = sdl.draw.width;
 	height = sdl.draw.height;
