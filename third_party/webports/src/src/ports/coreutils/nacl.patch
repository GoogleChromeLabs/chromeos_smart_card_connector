diff --git a/configure b/configure
--- a/configure
+++ b/configure
@@ -39821,7 +39821,7 @@ fi
 
 
 # Determine how to get the list of mounted file systems.
-ac_list_mounted_fs=
+ac_list_mounted_fs:=
 
 # If the getmntent function is available but not in the standard library,
 # make sure LIBS contains the appropriate -l option.
diff --git a/lib/cycle-check.c b/lib/cycle-check.c
--- a/lib/cycle-check.c
+++ b/lib/cycle-check.c
@@ -58,7 +58,12 @@ bool
 cycle_check (struct cycle_check_state *state, struct stat const *sb)
 {
   assure (state->magic == CC_MAGIC);
-
+  /*
+   * TODO(bradnelson): Drop this once we have real looking inodes.
+   * nacl_io doesn't provide sufficiently real inodes to allow this
+   * cycle check to work.
+   */
+#if !defined(__native_client__)
   /* If the current directory ever happens to be the same
      as the one we last recorded for the cycle detection,
      then it's obviously part of a cycle.  */
@@ -80,6 +85,7 @@ cycle_check (struct cycle_check_state *state, struct stat const *sb)
       state->dev_ino.st_dev = sb->st_dev;
       state->dev_ino.st_ino = sb->st_ino;
     }
+#endif
 
   return false;
 }
diff --git a/lib/getpass.c b/lib/getpass.c
--- a/lib/getpass.c
+++ b/lib/getpass.c
@@ -105,7 +105,9 @@ getpass (const char *prompt)
   else
     {
       /* We do the locking ourselves.  */
+#if !defined(__native_client__) || !defined(_NEWLIB_VERSION)
       __fsetlocking (tty, FSETLOCKING_BYCALLER);
+#endif
 
       out = in = tty;
     }
diff --git a/lib/same-inode.h b/lib/same-inode.h
--- a/lib/same-inode.h
+++ b/lib/same-inode.h
@@ -18,6 +18,12 @@
 #ifndef SAME_INODE_H
 # define SAME_INODE_H 1
 
+/*
+ * TODO(bradnelson): Drop this once nacl_io inode support is better.
+ */
+#if defined(__native_client__)
+# define SAME_INODE(Stat_buf_1, Stat_buf_2) 1
+#else
 # ifdef __VMS
 #  define SAME_INODE(a, b)             \
     ((a).st_ino[0] == (b).st_ino[0]    \
@@ -29,5 +35,6 @@
     ((a).st_ino == (b).st_ino \
      && (a).st_dev == (b).st_dev)
 # endif
+#endif
 
 #endif
diff --git a/lib/sys_types.in.h b/lib/sys_types.in.h
--- a/lib/sys_types.in.h
+++ b/lib/sys_types.in.h
@@ -20,6 +20,18 @@
 #endif
 @PRAGMA_COLUMNS@
 
+/*
+ * Workaround for old newlib toolchain incompatability with gnulib
+ * This was fixed in the native_client repo but the newlib toolchain
+ * is not longer being updated:
+ * https://codereview.chromium.org/1163893003
+ */
+#ifndef __nlink_t_defined
+#define __nlink_t_defined
+typedef unsigned int __nlink_t;
+typedef __nlink_t nlink_t;
+#endif
+
 #ifndef _@GUARD_PREFIX@_SYS_TYPES_H
 
 /* The include_next requires a split double-inclusion guard.  */
diff --git a/src/chroot.c b/src/chroot.c
--- a/src/chroot.c
+++ b/src/chroot.c
@@ -325,7 +325,11 @@ main (int argc, char **argv)
 #endif
     }
 
+#if defined(__native_client__)
+  errno = ENOSYS;
+#else
   if (chroot (newroot) != 0)
+#endif
     error (EXIT_CANCELED, errno, _("cannot change root directory to %s"),
            quote (newroot));
 
diff --git a/src/copy.c b/src/copy.c
--- a/src/copy.c
+++ b/src/copy.c
@@ -2632,6 +2632,10 @@ copy_internal (char const *src_name, char const *dst_name,
     }
   else if (S_ISBLK (src_mode) || S_ISCHR (src_mode) || S_ISSOCK (src_mode))
     {
+#if defined(__native_client__) && defined(_NEWLIB_VERSION)
+      error (0, ENOSYS, _("cannot create special file %s"), quote (dst_name));
+      goto un_backup;
+#else
       if (mknod (dst_name, src_mode & ~omitted_permissions, src_sb.st_rdev)
           != 0)
         {
@@ -2639,6 +2643,7 @@ copy_internal (char const *src_name, char const *dst_name,
                  quote (dst_name));
           goto un_backup;
         }
+#endif
     }
   else if (S_ISLNK (src_mode))
     {
diff --git a/src/df.c b/src/df.c
--- a/src/df.c
+++ b/src/df.c
@@ -1669,12 +1669,16 @@ main (int argc, char **argv)
         }
     }
 
+#if defined(__native_client__)
+  mount_list = NULL;
+#else
   mount_list =
     read_file_system_list ((fs_select_list != NULL
                             || fs_exclude_list != NULL
                             || print_type
                             || field_data[FSTYPE_FIELD].used
                             || show_local_fs));
+#endif
 
   if (mount_list == NULL)
     {
@@ -1696,8 +1700,10 @@ main (int argc, char **argv)
              _("cannot read table of mounted file systems"));
     }
 
+#if !defined(__native_client__)
   if (require_sync)
     sync ();
+#endif
 
   get_field_list ();
   get_header ();
diff --git a/src/fs.h b/src/fs.h
--- a/src/fs.h
+++ b/src/fs.h
@@ -2,7 +2,10 @@
    Please send additions to bug-coreutils@gnu.org and meskes@debian.org.
    This file is generated automatically from ./src/stat.c. */
 
-#if defined __linux__
+/* nacl_io does not have statfs so the following magic numbers which
+   specify the type of a filesystem is useless, but we need their
+   definitions to compile everything in coreutils. */
+#if defined __linux__ || defined __native_client__
 # define S_MAGIC_ADFS 0xADF5
 # define S_MAGIC_AFFS 0xADFF
 # define S_MAGIC_AFS 0x5346414F
diff --git a/src/hostid.c b/src/hostid.c
--- a/src/hostid.c
+++ b/src/hostid.c
@@ -75,7 +75,11 @@ main (int argc, char **argv)
       usage (EXIT_FAILURE);
     }
 
+#if defined(__native_client__)
+  id = 0x12345678;
+#else
   id = gethostid ();
+#endif
 
   /* POSIX says gethostid returns a "32-bit identifier" but is silent
      whether it's sign-extended.  Turn off any sign-extension.  This
diff --git a/src/mknod.c b/src/mknod.c
--- a/src/mknod.c
+++ b/src/mknod.c
@@ -248,8 +248,12 @@ main (int argc, char **argv)
         if (set_security_context)
           defaultcon (argv[optind], node_type);
 
+#if defined(__native_client__) && defined(_NEWLIB_VERSION)
+        error (EXIT_FAILURE, ENOSYS, "%s", quote (argv[optind]));
+#else
         if (mknod (argv[optind], newmode | node_type, device) != 0)
           error (EXIT_FAILURE, errno, "%s", quote (argv[optind]));
+#endif
       }
       break;
 
diff --git a/src/shred.c b/src/shred.c
--- a/src/shred.c
+++ b/src/shred.c
@@ -355,7 +355,9 @@ dosync (int fd, char const *qname)
       return -1;
     }
 
+#if !(defined(__native_client__) && defined(_NEWLIB_VERSION))
   sync ();
+#endif
   return 0;
 }
 
diff --git a/src/stat.c b/src/stat.c
--- a/src/stat.c
+++ b/src/stat.c
@@ -210,6 +210,7 @@ static char const *trailing_delim = "";
 static char const *decimal_point;
 static size_t decimal_point_len;
 
+#if !(defined(__native_client__) && defined(_NEWLIB_VERSION))
 /* Return the type of the specified file system.
    Some systems have statfvs.f_basetype[FSTYPSZ] (AIX, HP-UX, and Solaris).
    Others have statvfs.f_fstypename[_VFS_NAMELEN] (NetBSD 3.0).
@@ -530,6 +531,7 @@ human_fstype (STRUCT_STATVFS const *statfsbuf)
     }
 #endif
 }
+#endif
 
 static char * ATTRIBUTE_WARN_UNUSED_RESULT
 human_access (struct stat const *statbuf)
@@ -742,6 +744,7 @@ out_file_context (char *pformat, size_t prefix_len, char const *filename)
   return fail;
 }
 
+#if !(defined(__native_client__) && defined(_NEWLIB_VERSION))
 /* Print statfs info.  Return zero upon success, nonzero upon failure.  */
 static bool ATTRIBUTE_WARN_UNUSED_RESULT
 print_statfs (char *pformat, size_t prefix_len, unsigned int m,
@@ -828,6 +831,7 @@ print_statfs (char *pformat, size_t prefix_len, unsigned int m,
     }
   return fail;
 }
+#endif
 
 /* Return any bind mounted source for a path.
    The caller should not free the returned buffer.
@@ -1258,6 +1262,7 @@ print_it (char const *format, int fd, char const *filename,
 static bool ATTRIBUTE_WARN_UNUSED_RESULT
 do_statfs (char const *filename, char const *format)
 {
+#if !(defined(__native_client__) && defined(_NEWLIB_VERSION))
   STRUCT_STATVFS statfsbuf;
 
   if (STREQ (filename, "-"))
@@ -1276,6 +1281,11 @@ do_statfs (char const *filename, char const *format)
 
   bool fail = print_it (format, -1, filename, print_statfs, &statfsbuf);
   return ! fail;
+#else
+  error (0, ENOSYS, _("cannot read file system information for %s"),
+         quote (filename));
+  return false;
+#endif
 }
 
 /* stat the file and print what we find */
