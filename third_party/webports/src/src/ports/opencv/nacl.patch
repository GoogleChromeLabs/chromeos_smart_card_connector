diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -326,8 +326,10 @@ else()
   endif()
 endif()
 
-set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${OPENCV_LIB_INSTALL_PATH}")
-set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+if(BUILD_SHARED_LIBS)
+  set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${OPENCV_LIB_INSTALL_PATH}")
+  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+endif()
 
 if(INSTALL_TO_MANGLED_PATHS)
   set(OPENCV_INCLUDE_INSTALL_PATH ${OPENCV_INCLUDE_INSTALL_PATH}/opencv-${OPENCV_VERSION})
@@ -434,6 +436,8 @@ if(UNIX)
       set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} dl m log)
     elseif(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD|NetBSD|DragonFly")
       set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m pthread)
+    elseif(NACL AND NACL_LIBC STREQUAL "newlib")
+      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m pthread)
     else()
       set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} dl m pthread rt)
     endif()
@@ -449,8 +453,8 @@ include(cmake/OpenCVModule.cmake)
 #  Detect endianness of build platform
 # ----------------------------------------------------------------------------
 
-if(CMAKE_SYSTEM_NAME STREQUAL iOS)
-  # test_big_endian needs try_compile, which doesn't work for iOS
+if(CMAKE_SYSTEM_NAME STREQUAL iOS OR NACL)
+  # test_big_endian needs try_compile, which doesn't work for iOS or PNaCl
   # http://public.kitware.com/Bug/view.php?id=12288
   set(WORDS_BIGENDIAN 0)
 else()
diff --git a/modules/contrib/src/inputoutput.cpp b/modules/contrib/src/inputoutput.cpp
--- a/modules/contrib/src/inputoutput.cpp
+++ b/modules/contrib/src/inputoutput.cpp
@@ -76,7 +76,8 @@ namespace cv
             {
                 return list;
             }
-
+// NaCl does not define struct fields to deal with folders.
+#ifndef __native_client__
             while ((dirp = readdir(dp)) != NULL)
             {
                 if (dirp->d_type == DT_REG)
@@ -89,6 +90,7 @@ namespace cv
                 }
             }
             closedir(dp);
+#endif  //#ifndef __native__client__
         #endif
 
         return list;
@@ -166,7 +168,8 @@ namespace cv
             {
                 return list;
             }
-
+// NaCl does not define struct fields to deal with folders.
+#ifndef __native_client__
             while ((dirp = readdir(dp)) != NULL)
             {
                 if (dirp->d_type == DT_DIR &&
@@ -181,6 +184,8 @@ namespace cv
                 }
             }
             closedir(dp);
+#endif  //#ifndef __native__client__
+
         #endif
 
         return list;
diff --git a/modules/core/include/opencv2/core/operations.hpp b/modules/core/include/opencv2/core/operations.hpp
--- a/modules/core/include/opencv2/core/operations.hpp
+++ b/modules/core/include/opencv2/core/operations.hpp
@@ -58,7 +58,13 @@
 
   #if defined __clang__ && __clang_major__ >= 3 && !defined __ANDROID__ && !defined __EMSCRIPTEN__
     #ifdef __ATOMIC_SEQ_CST
+     // Clang in NaCl "cannot compile this atomic library call yet": use 
+     // instead a programmatic atomic fetch.
+     #ifndef __native_client__
         #define CV_XADD(addr, delta) __c11_atomic_fetch_add((_Atomic(int)*)(addr), (delta), __ATOMIC_SEQ_CST)
+     #else
+        static inline int CV_XADD(int* addr, int delta) { int tmp = *addr; *addr += delta; return tmp; }
+     #endif  //#ifndef __native_client__
     #else
         #define CV_XADD(addr, delta) __atomic_fetch_add((_Atomic(int)*)(addr), (delta), 5)
     #endif
diff --git a/modules/core/src/system.cpp b/modules/core/src/system.cpp
--- a/modules/core/src/system.cpp
+++ b/modules/core/src/system.cpp
@@ -491,7 +491,11 @@ string tempfile( const char* suffix )
     const int fd = mkstemp((char*)fname.c_str());
     if (fd == -1) return string();
 
+# ifndef __native_client__
     close(fd);
+# else
+    fclose((FILE*)fd);
+# endif  //#ifndef __native_client__
     remove(fname.c_str());
 # endif
 
diff --git a/modules/flann/include/opencv2/flann/allocator.h b/modules/flann/include/opencv2/flann/allocator.h
--- a/modules/flann/include/opencv2/flann/allocator.h
+++ b/modules/flann/include/opencv2/flann/allocator.h
@@ -68,7 +68,10 @@ T* allocate(size_t count = 1)
  *
  */
 
+// Some NaCl toolchains used to defined this.
+#if !defined(__native_client__) || !defined(WORDSIZE)
 const size_t     WORDSIZE=16;
+#endif
 const  size_t     BLOCKSIZE=8192;
 
 class PooledAllocator
diff --git a/modules/legacy/include/opencv2/legacy/legacy.hpp b/modules/legacy/include/opencv2/legacy/legacy.hpp
--- a/modules/legacy/include/opencv2/legacy/legacy.hpp
+++ b/modules/legacy/include/opencv2/legacy/legacy.hpp
@@ -519,8 +519,8 @@ typedef struct CvStereoCamera
 
     /* New part for stereo */
     CvPoint3D32f epipole[2];
-    CvPoint2D32f quad[2][4]; /* coordinates of destination quadrangle after
-                                epipolar geometry rectification */
+    CvPoint2D32f quads[2][4]; /* coordinates of destination quadrangle after
+                                 epipolar geometry rectification */
     double coeffs[2][3][3];/* coefficients for transformation */
     CvPoint2D32f border[2][4];
     CvSize warpSize;
diff --git a/modules/legacy/src/calibfilter.cpp b/modules/legacy/src/calibfilter.cpp
--- a/modules/legacy/src/calibfilter.cpp
+++ b/modules/legacy/src/calibfilter.cpp
@@ -42,7 +42,10 @@
 #include "precomp.hpp"
 #include <stdio.h>
 
+// PNaCl likes this preprocessor definition active, to use a struct field.
+#ifndef __native_client__
 #undef quad
+#endif  //#ifndef __native_client__
 
 CvCalibFilter::CvCalibFilter()
 {
@@ -95,10 +98,11 @@ bool CvCalibFilter::SetEtalon( CvCalibEtalonType type, double* params,
 
     Stop();
 
-    if (latestPoints != NULL)
+    for( i = 0; i < MAX_CAMERAS; i++ )
     {
-        for( i = 0; i < MAX_CAMERAS; i++ )
+        if( latestPoints[i] != NULL ) {
             cvFree( latestPoints + i );
+        }
     }
 
     if( type == CV_CALIB_ETALON_USER || type != etalonType )
@@ -529,7 +533,8 @@ void CvCalibFilter::DrawPoints( CvMat** dstarr )
         return;
     }
 
-    if( latestCounts )
+
+    if( 1 ) //latestCounts
     {
         for( i = 0; i < cameraCount; i++ )
         {
@@ -686,8 +691,8 @@ bool CvCalibFilter::SaveCameraParams( const char* filename )
         {
             for( j = 0; j < 4; j++ )
             {
-                fprintf(f, "%15.10f ", stereo.quad[i][j].x );
-                fprintf(f, "%15.10f ", stereo.quad[i][j].y );
+                fprintf(f, "%15.10f ", stereo.quads[i][j].x );
+                fprintf(f, "%15.10f ", stereo.quads[i][j].y );
             }
             fprintf(f, "\n");
         }
@@ -743,9 +748,9 @@ bool CvCalibFilter::LoadCameraParams( const char* filename )
     {
         for( j = 0; j < 4; j++ )
         {
-            int values_read = fscanf(f, "%f ", &(stereo.quad[i][j].x) );
+            int values_read = fscanf(f, "%f ", &(stereo.quads[i][j].x) );
             CV_Assert(values_read == 1);
-            values_read = fscanf(f, "%f ", &(stereo.quad[i][j].y) );
+            values_read = fscanf(f, "%f ", &(stereo.quads[i][j].y) );
             CV_Assert(values_read == 1);
         }
     }
diff --git a/modules/legacy/src/epilines.cpp b/modules/legacy/src/epilines.cpp
--- a/modules/legacy/src/epilines.cpp
+++ b/modules/legacy/src/epilines.cpp
@@ -46,7 +46,10 @@
 
 /* Valery Mosyagin */
 
+// PNaCl likes this preprocessor definition active, to use a struct field.
+#ifndef __native_client__
 #undef quad
+#endif  //#ifndef __native_client__
 
 #define EPS64D 1e-9
 
@@ -312,11 +315,11 @@ int icvComputeCoeffForStereo(  CvStereoCamera* stereoCamera)
     int i;
     for( i = 0; i < 4; i++ )
     {
-        quad1[i][0] = stereoCamera->quad[0][i].x;
-        quad1[i][1] = stereoCamera->quad[0][i].y;
+        quad1[i][0] = stereoCamera->quads[0][i].x;
+        quad1[i][1] = stereoCamera->quads[0][i].y;
 
-        quad2[i][0] = stereoCamera->quad[1][i].x;
-        quad2[i][1] = stereoCamera->quad[1][i].y;
+        quad2[i][0] = stereoCamera->quads[1][i].x;
+        quad2[i][1] = stereoCamera->quads[1][i].y;
     }
 
     icvComputeCoeffForStereoNew(        quad1,
@@ -1761,8 +1764,8 @@ void icvGetQuadsTransformStruct(  CvStereoCamera* stereoCamera)
     int i;
     for( i = 0; i < 4; i++ )
     {
-        stereoCamera->quad[0][i] = cvPoint2D32f(quad1[i][0],quad1[i][1]);
-        stereoCamera->quad[1][i] = cvPoint2D32f(quad2[i][0],quad2[i][1]);
+        stereoCamera->quads[0][i] = cvPoint2D32f(quad1[i][0],quad1[i][1]);
+        stereoCamera->quads[1][i] = cvPoint2D32f(quad2[i][0],quad2[i][1]);
     }
 
     return;
@@ -3067,12 +3070,12 @@ int icvComputeRestStereoParams(CvStereoCamera *stereoparams)
     icvGetQuadsTransformStruct(stereoparams);
 
     cvInitPerspectiveTransform( stereoparams->warpSize,
-                                stereoparams->quad[0],
+                                stereoparams->quads[0],
                                 stereoparams->coeffs[0],
                                 0);
 
     cvInitPerspectiveTransform( stereoparams->warpSize,
-                                stereoparams->quad[1],
+                                stereoparams->quads[1],
                                 stereoparams->coeffs[1],
                                 0);
 
