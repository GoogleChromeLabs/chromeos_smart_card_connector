diff --git a/configure b/configure
--- a/configure
+++ b/configure
@@ -7563,7 +7563,6 @@ $as_echo "$gl_cv_cc_uninitialized_supported" >&6; }
     -Wattributes \
     -Wbad-function-cast \
     -Wbuiltin-macro-redefined \
-    -Wcast-align \
     -Wchar-subscripts \
     -Wclobbered \
     -Wcomment \
@@ -7581,7 +7580,6 @@ $as_echo "$gl_cv_cc_uninitialized_supported" >&6; }
     -Wextra \
     -Wformat-contains-nul \
     -Wformat-extra-args \
-    -Wformat-nonliteral \
     -Wformat-security \
     -Wformat-y2k \
     -Wformat-zero-length \
@@ -7604,7 +7602,6 @@ $as_echo "$gl_cv_cc_uninitialized_supported" >&6; }
     -Wmissing-field-initializers \
     -Wmissing-include-dirs \
     -Wmissing-parameter-type \
-    -Wmissing-prototypes \
     -Wmudflap \
     -Wmultichar \
     -Wnarrowing \
@@ -7634,7 +7631,6 @@ $as_echo "$gl_cv_cc_uninitialized_supported" >&6; }
     -Wstrict-prototypes \
     -Wsuggest-attribute=const \
     -Wsuggest-attribute=format \
-    -Wsuggest-attribute=noreturn \
     -Wsuggest-attribute=pure \
     -Wswitch \
     -Wswitch-default \
@@ -15877,6 +15873,10 @@ _ACEOF
 
 
 
+REPLACE_POSIX_SPAWN_FILE_ACTIONS_ADDOPEN=1
+REPLACE_POSIX_SPAWN_FILE_ACTIONS_ADDDUP2=1
+REPLACE_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE=1
+REPLACE_POSIX_SPAWN=1
 
 
 
@@ -23088,7 +23088,7 @@ $as_echo "$gl_cv_func_gettimeofday_clobber" >&6; }
 
  case "$gl_cv_func_gettimeofday_clobber" in
    *yes)
-     REPLACE_GETTIMEOFDAY=1
+     REPLACE_GETTIMEOFDAY=0
 
 
 $as_echo "#define gmtime rpl_gmtime" >>confdefs.h
diff --git a/lib/getdtablesize.c b/lib/getdtablesize.c
--- a/lib/getdtablesize.c
+++ b/lib/getdtablesize.c
@@ -20,6 +20,14 @@
 /* Specification.  */
 #include <unistd.h>
 
+#if defined(__native_client__) && defined(_NEWLIB_VERSION)
+/* TODO(bradnelson): Remove when newlib supports this. */
+/* Make up a value for newlib. */
+int getdtablesize (void) {
+  return 10000;
+}
+#endif
+
 #if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__
 
 #include <stdio.h>
diff --git a/lib/sigaction.c b/lib/sigaction.c
--- a/lib/sigaction.c
+++ b/lib/sigaction.c
@@ -51,9 +51,11 @@
    with this module should stick with only sigaction().  */
 
 /* Check some of our assumptions.  */
+#if !defined(__native_client__)
 #if defined SIGCHLD || defined HAVE_SIGALTSTACK || defined HAVE_SIGINTERRUPT
 # error "Revisit the assumptions made in the sigaction module"
 #endif
+#endif
 
 /* Out-of-range substitutes make a good fallback for uncatchable
    signals.  */
@@ -104,9 +106,11 @@ sigaction_handler (int sig)
      reinstall the handler will trigger the default handler; oh
      well.  */
   handler = action_array[sig].sa_handler;
+#if !defined(__native_client__) || !defined(_NEWLIB_VERSION)
   if ((action_array[sig].sa_flags & SA_RESETHAND) == 0)
     signal (sig, sigaction_handler);
   else
+#endif
     action_array[sig].sa_handler = NULL;
 
   /* Block appropriate signals.  */
@@ -171,7 +175,11 @@ sigaction (int sig, const struct sigaction *restrict act,
           if (oact->sa_handler == SIG_ERR)
             goto failure;
           signal (sig, oact->sa_handler);
+#if defined(__native_client__) && defined(_NEWLIB_VERSION)
+          oact->sa_flags = SA_NODEFER;
+#else
           oact->sa_flags = SA_RESETHAND | SA_NODEFER;
+#endif
           sigemptyset (&oact->sa_mask);
         }
     }
diff --git a/lib/spawni.c b/lib/spawni.c
--- a/lib/spawni.c
+++ b/lib/spawni.c
@@ -80,6 +80,9 @@
 # define internal_function /* empty */
 #endif
 
+#if defined(__native_client__)
+#include <spawn.h>
+#endif
 
 /* The Unix standard contains a long explanation of the way to signal
    an error after the fork() was successful.  Since no new wait status
@@ -141,6 +144,13 @@ __spawni (pid_t *pid, const char *file,
           const posix_spawnattr_t *attrp, char *const argv[],
           char *const envp[], int use_path)
 {
+#if defined(__native_client__)
+  *pid = spawnve(P_NOWAIT, argv[0], argv, envp);
+  if (*pid < 0) {
+    return errno;
+  }
+  return 0;
+#else
   pid_t new_pid;
   char *path, *p, *name;
   size_t len;
@@ -369,6 +379,7 @@ __spawni (pid_t *pid, const char *file,
 
   /* Return with an error.  */
   _exit (SPAWN_ERROR);
+#endif
 }
 
 #endif
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -1488,7 +1488,7 @@ clean-binPROGRAMS:
 
 m4$(EXEEXT): $(m4_OBJECTS) $(m4_DEPENDENCIES) $(EXTRA_m4_DEPENDENCIES) 
 	@rm -f m4$(EXEEXT)
-	$(AM_V_CCLD)$(LINK) $(m4_OBJECTS) $(m4_LDADD) $(LIBS)
+	$(AM_V_CCLD)$(LINK) $(m4_OBJECTS) $(m4_LDADD) $(LIBS) $(EXTRA_LIBS)
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
diff --git a/src/builtin.c b/src/builtin.c
--- a/src/builtin.c
+++ b/src/builtin.c
@@ -153,6 +153,9 @@ static builtin const builtin_tab[] =
 
 static predefined const predefined_tab[] =
 {
+#if defined(__native_client__)
+  { "nacl",     "__nacl__",     "" },
+#endif
 #if UNIX
   { "unix",     "__unix__",     "" },
 #endif
@@ -162,7 +165,7 @@ static predefined const predefined_tab[] =
 #if OS2
   { "os2",      "__os2__",      "" },
 #endif
-#if !UNIX && !W32_NATIVE && !OS2
+#if !UNIX && !W32_NATIVE && !OS2 && !defined(__native_client__)
 # warning Platform macro not provided
 #endif
   { NULL,       "__gnu__",      "" },
diff --git a/src/m4.c b/src/m4.c
--- a/src/m4.c
+++ b/src/m4.c
@@ -362,7 +362,11 @@ process_file (const char *name)
 #endif
 
 int
+#if defined(__native_client__)
+nacl_main (int argc, const char *argv[])
+#else
 main (int argc, char *const *argv)
+#endif
 {
   struct sigaction act;
   macro_definition *head;       /* head of deferred argument list */
@@ -403,7 +407,11 @@ main (int argc, char *const *argv)
   sigemptyset (&act.sa_mask);
   /* One-shot - if we fault while handling a fault, we want to revert
      to default signal behavior.  */
+#if defined(__native_client__) && defined(_NEWLIB_VERSION)
+  act.sa_flags = SA_NODEFER;
+#else
   act.sa_flags = SA_NODEFER | SA_RESETHAND;
+#endif
   act.sa_handler = fault_handler;
   sigaction (SIGSEGV, &act, NULL);
   sigaction (SIGABRT, &act, NULL);
