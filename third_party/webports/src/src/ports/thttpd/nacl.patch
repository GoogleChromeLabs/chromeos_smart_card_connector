diff --git a/fdwatch.c b/fdwatch.c
--- a/fdwatch.c
+++ b/fdwatch.c
@@ -31,7 +31,7 @@
 #include <string.h>
 #include <sys/time.h>
 #include <sys/resource.h>
-#include <syslog.h>
+#include "my_syslog.h"
 #include <fcntl.h>
 
 #ifndef MIN
@@ -788,7 +788,6 @@ select_watch( long timeout_msecs )
 	}
     if ( r <= 0 )
 	return r;
-
     ridx = 0;
     for ( idx = 0; idx < nselect_fds; ++idx )
 	if ( select_check_fd( select_fds[idx] ) )
diff --git a/fdwatch.h b/fdwatch.h
--- a/fdwatch.h
+++ b/fdwatch.h
@@ -54,6 +54,9 @@
 #define INFTIM -1
 #endif /* INFTIM */
 
+#ifdef __cplusplus 
+extern "C" {
+#endif
 /* Figure out how many file descriptors the system allows, and
 ** initialize the fdwatch data structures.  Returns -1 on failure.
 */
@@ -81,5 +84,8 @@ extern void* fdwatch_get_next_client_data( void );
 
 /* Generate debugging statistics syslog message. */
 extern void fdwatch_logstats( long secs );
+#ifdef __cplusplus 
+}
+#endif
 
 #endif /* _FDWATCH_H_ */
diff --git a/libhttpd.c b/libhttpd.c
--- a/libhttpd.c
+++ b/libhttpd.c
@@ -28,6 +28,7 @@
 
 #include "config.h"
 #include "version.h"
+#include "my_syslog.h"
 
 #ifdef SHOW_SERVER_VERSION
 #define EXPOSED_SERVER_SOFTWARE SERVER_SOFTWARE
@@ -51,7 +52,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <syslog.h>
 #include <unistd.h>
 #include <stdarg.h>
 
@@ -742,10 +742,10 @@ send_response( httpd_conn* hc, int status, char* title, char* extraheads, char*
 	hc, status, title, "", extraheads, "text/html; charset=%s", (off_t) -1,
 	(time_t) 0 );
     (void) my_snprintf( buf, sizeof(buf), "\
-<HTML>\n\
-<HEAD><TITLE>%d %s</TITLE></HEAD>\n\
-<BODY BGCOLOR=\"#cc9999\" TEXT=\"#000000\" LINK=\"#2020ff\" VLINK=\"#4040cc\">\n\
-<H2>%d %s</H2>\n",
+<html>\n\
+<head><title>%d %s</title></head>\n\
+<body bgcolor=\"#cc9999\" text=\"#000000\" link=\"#2020ff\" vlink=\"#4040cc\">\n\
+<h2>%d %s</h2>\n",
 	status, title, status, title );
     add_response( hc, buf );
     defang( arg, defanged_arg, sizeof(defanged_arg) );
@@ -769,10 +769,10 @@ send_response_tail( httpd_conn* hc )
     char buf[1000];
 
     (void) my_snprintf( buf, sizeof(buf), "\
-<HR>\n\
-<ADDRESS><A HREF=\"%s\">%s</A></ADDRESS>\n\
-</BODY>\n\
-</HTML>\n",
+<hr />\n\
+<address><a href=\"%s\">%s</a></address>\n\
+</body>\n\
+</html>\n",
 	SERVER_ADDRESS, EXPOSED_SERVER_SOFTWARE );
     add_response( hc, buf );
     }
@@ -1578,27 +1578,7 @@ expand_symlinks( char* path, char** restP, int no_symlink_check, int tildemapped
 	    restlen = 0;
 	    }
 
-	/* Try reading the current filename as a symlink */
-	if ( checked[0] == '\0' )
-	    continue;
-	linklen = readlink( checked, link, sizeof(link) - 1 );
-	if ( linklen == -1 )
-	    {
-	    if ( errno == EINVAL )
-		continue;               /* not a symlink */
-	    if ( errno == EACCES || errno == ENOENT || errno == ENOTDIR )
-		{
-		/* That last component was bogus.  Restore and return. */
-		*restP = r - ( prevrestlen - restlen );
-		if ( prevcheckedlen == 0 )
-		    (void) strcpy( checked, "." );
-		else
-		    checked[prevcheckedlen] = '\0';
-		return checked;
-		}
-	    syslog( LOG_ERR, "readlink %.80s - %m", checked );
-	    return (char*) 0;
-	    }
+	continue; // not a symlink
 	++nlinks;
 	if ( nlinks > MAX_LINKS )
 	    {
@@ -1691,22 +1671,15 @@ httpd_get_conn( httpd_server* hs, int listen_fd, httpd_conn* hc )
 	}
 
     /* Accept the new connection. */
-    sz = sizeof(sa);
+    sz = sizeof(sa.sa);
     hc->conn_fd = accept( listen_fd, &sa.sa, &sz );
-    if ( hc->conn_fd < 0 )
+    if ( hc->conn_fd == -1 )
 	{
 	if ( errno == EWOULDBLOCK )
 	    return GC_NO_MORE;
 	syslog( LOG_ERR, "accept - %m" );
 	return GC_FAIL;
 	}
-    if ( ! sockaddr_check( &sa ) )
-	{
-	syslog( LOG_ERR, "unknown sockaddr family" );
-	close( hc->conn_fd );
-	hc->conn_fd = -1;
-	return GC_FAIL;
-	}
     (void) fcntl( hc->conn_fd, F_SETFD, 1 );
     hc->hs = hs;
     (void) memset( &hc->client_addr, 0, sizeof(hc->client_addr) );
@@ -2697,7 +2670,9 @@ ls( httpd_conn* hc )
     char* timestr;
     ClientData client_data;
 
-    dirp = opendir( hc->expnfilename );
+    char buf[1000];
+    stat( hc->expnfilename, &sb);
+	dirp = opendir( hc->expnfilename );
     if ( dirp == (DIR*) 0 )
 	{
 	syslog( LOG_ERR, "opendir %.80s - %m", hc->expnfilename );
@@ -2723,59 +2698,34 @@ ls( httpd_conn* hc )
 	    return -1;
 	    }
 	++hc->hs->cgi_count;
-	r = fork( );
-	if ( r < 0 )
-	    {
-	    syslog( LOG_ERR, "fork - %m" );
-	    closedir( dirp );
-	    httpd_send_err(
-		hc, 500, err500title, "", err500form, hc->encodedurl );
-	    return -1;
-	    }
-	if ( r == 0 )
-	    {
-	    /* Child process. */
-	    sub_process = 1;
-	    httpd_unlisten( hc->hs );
+
+	syslog( LOG_INFO, "before send_mime\n");
 	    send_mime(
 		hc, 200, ok200title, "", "", "text/html; charset=%s",
 		(off_t) -1, hc->sb.st_mtime );
 	    httpd_write_response( hc );
-
-#ifdef CGI_NICE
-	    /* Set priority. */
-	    (void) nice( CGI_NICE );
-#endif /* CGI_NICE */
-
-	    /* Open a stdio stream so that we can use fprintf, which is more
-	    ** efficient than a bunch of separate write()s.  We don't have
-	    ** to worry about double closes or file descriptor leaks cause
-	    ** we're in a subprocess.
-	    */
-	    fp = fdopen( hc->conn_fd, "w" );
-	    if ( fp == (FILE*) 0 )
-		{
-		syslog( LOG_ERR, "fdopen - %m" );
-		httpd_send_err(
-		    hc, 500, err500title, "", err500form, hc->encodedurl );
-		httpd_write_response( hc );
-		closedir( dirp );
-		exit( 1 );
-		}
-
-	    (void) fprintf( fp, "\
-<HTML>\n\
-<HEAD><TITLE>Index of %.80s</TITLE></HEAD>\n\
-<BODY BGCOLOR=\"#99cc99\" TEXT=\"#000000\" LINK=\"#2020ff\" VLINK=\"#4040cc\">\n\
-<H2>Index of %.80s</H2>\n\
-<PRE>\n\
+	syslog( LOG_INFO, "after write_response\n");
+
+	const char* format_s1 = "\
+<html>\n\
+<head><title>Index of %.80s</title></head>\n\
+<body bgcolor=\"#99cc99\" text=\"#000000\" link=\"#2020ff\" vlink=\"#4040cc\">\n\
+<h2>Index of %.80s</h2>\n\
+<pre>\n\
 mode  links  bytes  last-changed  name\n\
-<HR>",
-		hc->encodedurl, hc->encodedurl );
+<hr />\n";
+		char* str = (char*) malloc(strlen(hc->encodedurl) * 2 + strlen(format_s1));
+		if (str) {
+			sprintf( str, format_s1, hc->encodedurl, hc->encodedurl );
+			write(hc->conn_fd, str, strlen(str));
+			free(str);
+			str = NULL;
+		}
 
 	    /* Read in names. */
 	    nnames = 0;
-	    while ( ( de = readdir( dirp ) ) != 0 )     /* dirent or direct */
+		char* str_l = (char*) malloc(1024);
+	    while ( ( de = readdir( dirp ) ) != 0 )     // dirent or direct 
 		{
 		if ( nnames >= maxnames )
 		    {
@@ -2810,6 +2760,7 @@ mode  links  bytes  last-changed  name\n\
 	    qsort( nameptrs, nnames, sizeof(*nameptrs), name_compare );
 
 	    /* Generate output. */
+		syslog( LOG_INFO, "before output (%d names)", nnames);
 	    for ( i = 0; i < nnames; ++i )
 		{
 		httpd_realloc_str(
@@ -2839,9 +2790,8 @@ mode  links  bytes  last-changed  name\n\
 		    &encrname, &maxencrname, 3 * strlen( rname ) + 1 );
 		strencode( encrname, maxencrname, rname );
 
-		if ( stat( name, &sb ) < 0 || lstat( name, &lsb ) < 0 )
+		if ( stat( name, &sb ) < 0 )
 		    continue;
-
 		linkprefix = "";
 		link[0] = '\0';
 		/* Break down mode word.  First the file type. */
@@ -2917,41 +2867,24 @@ mode  links  bytes  last-changed  name\n\
 		    }
 
 		/* And print. */
-		(void)  fprintf( fp,
-		   "%s %3ld  %10lld  %s  <A HREF=\"/%.500s%s\">%.80s</A>%s%s%s\n",
-		    modestr, (long) lsb.st_nlink, (int64_t) lsb.st_size,
-		    timestr, encrname, S_ISDIR(sb.st_mode) ? "/" : "",
-		    nameptrs[i], linkprefix, link, fileclass );
+		if (str_l) {
+			sprintf( str_l,
+			   "%s %3ld  %10lld  %s  <a href=\"/%.500s%s\">%.80s</a>%s%s%s\n",
+				modestr, (long) lsb.st_nlink, (int64_t) lsb.st_size,
+				timestr, encrname, S_ISDIR(sb.st_mode) ? "/" : "",
+				nameptrs[i], linkprefix, link, fileclass );
+			syslog( LOG_INFO, "writing file entry: %d chars\n", strlen(str_l));
+			write( hc->conn_fd, str_l, strlen(str_l) );
 		}
-
-	    (void) fprintf( fp, "</PRE></BODY>\n</HTML>\n" );
-	    (void) fclose( fp );
-	    exit( 0 );
+		}
+		free(str_l);
+		const char* endstr = "</pre></body>\n</html>\n";
+	    write( hc->conn_fd, endstr, strlen(endstr) );
 	    }
 
-	/* Parent process. */
-	closedir( dirp );
-	syslog( LOG_INFO, "spawned indexing process %d for directory '%.200s'", r, hc->expnfilename );
-#ifdef CGI_TIMELIMIT
-	/* Schedule a kill for the child process, in case it runs too long */
-	client_data.i = r;
-	if ( tmr_create( (struct timeval*) 0, cgi_kill, client_data, CGI_TIMELIMIT * 1000L, 0 ) == (Timer*) 0 )
-	    {
-	    syslog( LOG_CRIT, "tmr_create(cgi_kill ls) failed" );
-	    exit( 1 );
-	    }
-#endif /* CGI_TIMELIMIT */
 	hc->status = 200;
 	hc->bytes_sent = CGI_BYTECOUNT;
 	hc->should_linger = 0;
-	}
-    else
-	{
-	closedir( dirp );
-	httpd_send_err(
-	    hc, 501, err501title, "", err501form, httpd_method_str( hc->method ) );
-	return -1;
-	}
 
     return 0;
     }
@@ -3465,24 +3398,6 @@ cgi_child( httpd_conn* hc )
 	    (void) dup2( hc->conn_fd, STDERR_FILENO );
 	}
 
-    /* At this point we would like to set close-on-exec again for hc->conn_fd
-    ** (see previous comments on Linux's broken behavior re: close-on-exec
-    ** and dup.)  Unfortunately there seems to be another Linux problem, or
-    ** perhaps a different aspect of the same problem - if we do this
-    ** close-on-exec in Linux, the socket stays open but stderr gets
-    ** closed - the last fd duped from the socket.  What a mess.  So we'll
-    ** just leave the socket as is, which under other OSs means an extra
-    ** file descriptor gets passed to the child process.  Since the child
-    ** probably already has that file open via stdin stdout and/or stderr,
-    ** this is not a problem.
-    */
-    /* (void) fcntl( hc->conn_fd, F_SETFD, 1 ); */
-
-#ifdef CGI_NICE
-    /* Set priority. */
-    (void) nice( CGI_NICE );
-#endif /* CGI_NICE */
-
     /* Split the program into directory and binary, so we can chdir()
     ** to the program's own directory.  This isn't in the CGI 1.1
     ** spec, but it's what other HTTP servers do.
@@ -3674,8 +3589,7 @@ really_start_request( httpd_conn* hc, struct timeval* nowP )
 	if ( ! ( hc->sb.st_mode & S_IROTH ) )
 	    {
 	    syslog(
-		LOG_INFO,
-		"%.80s URL \"%.80s\" tried to index a directory with indexing disabled",
+		LOG_INFO, "%.80s URL \"%.80s\" tried to index a directory with indexing disabled",
 		httpd_ntoa( &hc->client_addr ), hc->encodedurl );
 	    httpd_send_err(
 		hc, 403, err403title, "",
@@ -3692,10 +3606,12 @@ really_start_request( httpd_conn* hc, struct timeval* nowP )
 	if ( ! check_referer( hc ) )
 	    return -1;
 	/* Ok, generate an index. */
+
 	return ls( hc );
 #else /* GENERATE_INDEXES */
 	syslog(
-	    LOG_INFO, "%.80s URL \"%.80s\" tried to index a directory",
+	    LOG_INFO,
+	    "%.80s URL \"%.80s\" tried to index a directory",
 	    httpd_ntoa( &hc->client_addr ), hc->encodedurl );
 	httpd_send_err(
 	    hc, 403, err403title, "",
@@ -3752,7 +3668,7 @@ really_start_request( httpd_conn* hc, struct timeval* nowP )
 	    {
 	    syslog(
 		LOG_NOTICE,
-		"%.80s URL \"%.80s\" tried to retrieve an auth file",
+	    "%.80s URL \"%.80s\" tried to retrieve an auth file",
 		httpd_ntoa( &hc->client_addr ), hc->encodedurl );
 	    httpd_send_err(
 		hc, 403, err403title, "",
@@ -3767,7 +3683,7 @@ really_start_request( httpd_conn* hc, struct timeval* nowP )
 	{
 	syslog(
 	    LOG_NOTICE,
-	    "%.80s URL \"%.80s\" tried to retrieve an auth file",
+		"%.80s URL \"%.80s\" tried to retrieve an auth file",
 	    httpd_ntoa( &hc->client_addr ), hc->encodedurl );
 	httpd_send_err(
 	    hc, 403, err403title, "",
@@ -3791,6 +3707,9 @@ really_start_request( httpd_conn* hc, struct timeval* nowP )
     ** trying to either serve or run a non-CGI file as CGI.   Either case
     ** is prohibited.
     */
+    /* nacl_io's http filesystem marks all files as executable so this check
+     * will generate false positives */
+#ifndef __native_client__
     if ( hc->sb.st_mode & S_IXOTH )
 	{
 	syslog(
@@ -3802,6 +3721,7 @@ really_start_request( httpd_conn* hc, struct timeval* nowP )
 	    hc->encodedurl );
 	return -1;
 	}
+#endif
     if ( hc->pathinfo[0] != '\0' )
 	{
 	syslog(
@@ -3942,14 +3862,6 @@ make_log_entry( httpd_conn* hc, struct timeval* nowP )
 	(void) my_snprintf( date, sizeof(date),
 	    "%s %c%04d", date_nozone, sign, zone );
 	/* And write the log entry. */
-	(void) fprintf( hc->hs->logfp,
-	    "%.80s - %.80s [%s] \"%.80s %.300s %.80s\" %d %s \"%.200s\" \"%.200s\"\n",
-	    httpd_ntoa( &hc->client_addr ), ru, date,
-	    httpd_method_str( hc->method ), url, hc->protocol,
-	    hc->status, bytes, hc->referer, hc->useragent );
-#ifdef FLUSH_LOG_EVERY_TIME
-	(void) fflush( hc->hs->logfp );
-#endif
 	}
     else
 	syslog( LOG_INFO,
diff --git a/libhttpd.h b/libhttpd.h
--- a/libhttpd.h
+++ b/libhttpd.h
@@ -164,7 +164,9 @@ typedef struct {
 #define CHST_CRLFCR 10
 #define CHST_BOGUS 11
 
-
+#ifdef __cplusplus
+extern "C" {
+#endif
 /* Initializes.  Does the socket(), bind(), and listen().   Returns an
 ** httpd_server* which includes a socket fd that you can select() on.
 ** Return (httpd_server*) 0 on error.
@@ -280,5 +282,8 @@ extern int httpd_write_fully( int fd, const void* buf, size_t nbytes );
 
 /* Generate debugging statistics syslog message. */
 extern void httpd_logstats( long secs );
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _LIBHTTPD_H_ */
diff --git a/match.h b/match.h
--- a/match.h
+++ b/match.h
@@ -28,9 +28,15 @@
 #ifndef _MATCH_H_
 #define _MATCH_H_
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 /* Simple shell-style filename pattern matcher.  Only does ? * and **, and
 ** multiple patterns separated by |.  Returns 1 or 0.
 */
 extern int match( const char* pattern, const char* string );
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _MATCH_H_ */
diff --git a/mmc.c b/mmc.c
--- a/mmc.c
+++ b/mmc.c
@@ -35,8 +35,8 @@
 #include <stdio.h>
 #include <time.h>
 #include <fcntl.h>
-#include <syslog.h>
 #include <errno.h>
+#include "my_syslog.h"
 
 #ifdef HAVE_MMAP
 #include <sys/mman.h>
@@ -522,10 +522,6 @@ hash( ino_t ino, dev_t dev, off_t size, time_t ctime )
 void
 mmc_logstats( long secs )
     {
-    syslog(
-	LOG_INFO, "  map cache - %d allocated, %d active (%lld bytes), %d free; hash size: %d; expire age: %ld",
-	alloc_count, map_count, (int64_t) mapped_bytes, free_count, hash_size,
-	expire_age );
     if ( map_count + free_count != alloc_count )
 	syslog( LOG_ERR, "map counts don't add up!" );
     }
diff --git a/mmc.h b/mmc.h
--- a/mmc.h
+++ b/mmc.h
@@ -28,6 +28,9 @@
 #ifndef _MMC_H_
 #define _MMC_H_
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 /* Returns an mmap()ed area for the given file, or (void*) 0 on errors.
 ** If you have a stat buffer on the file, pass it in, otherwise pass 0.
 ** Same for the current time.
@@ -51,5 +54,8 @@ extern void mmc_destroy( void );
 
 /* Generate debugging statistics syslog message. */
 extern void mmc_logstats( long secs );
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _MMC_H_ */
diff --git a/tdate_parse.h b/tdate_parse.h
--- a/tdate_parse.h
+++ b/tdate_parse.h
@@ -28,6 +28,12 @@
 #ifndef _TDATE_PARSE_H_
 #define _TDATE_PARSE_H_
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 extern time_t tdate_parse( char* str );
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _TDATE_PARSE_H_ */
diff --git a/thttpd.c b/thttpd.c
--- a/thttpd.c
+++ b/thttpd.c
@@ -28,6 +28,7 @@
 
 #include "config.h"
 #include "version.h"
+#include "my_syslog.h"
 
 #include <sys/param.h>
 #include <sys/types.h>
@@ -48,7 +49,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <syslog.h>
 #ifdef TIME_WITH_SYS_TIME
 #include <time.h>
 #endif
@@ -68,7 +68,6 @@
 typedef long long int64_t;
 #endif
 
-
 static char* argv0;
 static int debug;
 static unsigned short port;
@@ -179,7 +178,6 @@ handle_term( int sig )
 
     shut_down();
     syslog( LOG_NOTICE, "exiting due to signal %d", sig );
-    closelog();
     exit( 1 );
     }
 
@@ -269,8 +267,7 @@ handle_usr1( int sig )
 	** main loop won't wake up until the next new connection.
 	*/
 	shut_down();
-	syslog( LOG_NOTICE, "exiting" );
-	closelog();
+	syslog( LOG_NOTICE, "exiting USR1" );
 	exit( 0 );
 	}
 
@@ -281,7 +278,7 @@ handle_usr1( int sig )
     }
 
 
-/* SIGUSR2 says to generate the stats syslogs immediately. */
+/* SIGUSR2 says to generate the stats immediately. */
 static void
 handle_usr2( int sig )
     {
@@ -345,14 +342,13 @@ re_open_logfile( void )
 	    syslog( LOG_CRIT, "re-opening %.80s - %m", logfile );
 	    return;
 	    }
-	(void) fcntl( fileno( logfp ), F_SETFD, 1 );
 	httpd_set_logfp( hs, logfp );
 	}
     }
 
 
 int
-main( int argc, char** argv )
+nacl_main( int argc, char** argv )
     {
     char* cp;
     struct passwd* pwd;
@@ -370,13 +366,11 @@ main( int argc, char** argv )
     struct timeval tv;
 
     argv0 = argv[0];
-
     cp = strrchr( argv0, '/' );
     if ( cp != (char*) 0 )
 	++cp;
     else
 	cp = argv0;
-    openlog( cp, LOG_NDELAY|LOG_PID, LOG_FACILITY );
 
     /* Handle command-line arguments. */
     parse_args( argc, argv );
@@ -409,7 +403,6 @@ main( int argc, char** argv )
 	if ( pwd == (struct passwd*) 0 )
 	    {
 	    syslog( LOG_CRIT, "unknown user - '%.80s'", user );
-	    (void) fprintf( stderr, "%s: unknown user - '%s'\n", argv0, user );
 	    exit( 1 );
 	    }
 	uid = pwd->pw_uid;
@@ -432,15 +425,12 @@ main( int argc, char** argv )
 	    if ( logfp == (FILE*) 0 )
 		{
 		syslog( LOG_CRIT, "%.80s - %m", logfile );
-		perror( logfile );
 		exit( 1 );
 		}
 	    if ( logfile[0] != '/' )
 		{
 		syslog( LOG_WARNING, "logfile is not an absolute path, you may not be able to re-open it" );
-		(void) fprintf( stderr, "%s: logfile is not an absolute path, you may not be able to re-open it\n", argv0 );
 		}
-	    (void) fcntl( fileno( logfp ), F_SETFD, 1 );
 	    if ( getuid() == 0 )
 		{
 		/* If we are root then we chown the log file to the user we'll
@@ -449,7 +439,6 @@ main( int argc, char** argv )
 		if ( fchown( fileno( logfp ), uid, gid ) < 0 )
 		    {
 		    syslog( LOG_WARNING, "fchown logfile - %m" );
-		    perror( "fchown logfile" );
 		    }
 		}
 	    }
@@ -463,7 +452,6 @@ main( int argc, char** argv )
 	if ( chdir( dir ) < 0 )
 	    {
 	    syslog( LOG_CRIT, "chdir - %m" );
-	    perror( "chdir" );
 	    exit( 1 );
 	    }
 	}
@@ -477,13 +465,13 @@ main( int argc, char** argv )
 	if ( chdir( pwd->pw_dir ) < 0 )
 	    {
 	    syslog( LOG_CRIT, "chdir - %m" );
-	    perror( "chdir" );
 	    exit( 1 );
 	    }
 	}
 #endif /* USE_USER_DIR */
 
     /* Get current directory. */
+
     (void) getcwd( cwd, sizeof(cwd) - 1 );
     if ( cwd[strlen( cwd ) - 1] != '/' )
 	(void) strcat( cwd, "/" );
@@ -498,28 +486,6 @@ main( int argc, char** argv )
 	    (void) fclose( stdout );
 	(void) fclose( stderr );
 
-	/* Daemonize - make ourselves a subprocess. */
-#ifdef HAVE_DAEMON
-	if ( daemon( 1, 1 ) < 0 )
-	    {
-	    syslog( LOG_CRIT, "daemon - %m" );
-	    exit( 1 );
-	    }
-#else /* HAVE_DAEMON */
-	switch ( fork() )
-	    {
-	    case 0:
-	    break;
-	    case -1:
-	    syslog( LOG_CRIT, "fork - %m" );
-	    exit( 1 );
-	    default:
-	    exit( 0 );
-	    }
-#ifdef HAVE_SETSID
-        (void) setsid();
-#endif /* HAVE_SETSID */
-#endif /* HAVE_DAEMON */
 	}
     else
 	{
@@ -561,7 +527,6 @@ main( int argc, char** argv )
 	if ( chroot( cwd ) < 0 )
 	    {
 	    syslog( LOG_CRIT, "chroot - %m" );
-	    perror( "chroot" );
 	    exit( 1 );
 	    }
 	/* If we're logging and the logfile's pathname begins with the
@@ -582,7 +547,6 @@ main( int argc, char** argv )
 	    else
 		{
 		syslog( LOG_WARNING, "logfile is not within the chroot tree, you will not be able to re-open it" );
-		(void) fprintf( stderr, "%s: logfile is not within the chroot tree, you will not be able to re-open it\n", argv0 );
 		}
 	    }
 	(void) strcpy( cwd, "/" );
@@ -590,7 +554,6 @@ main( int argc, char** argv )
 	if ( chdir( cwd ) < 0 )
 	    {
 	    syslog( LOG_CRIT, "chroot chdir - %m" );
-	    perror( "chroot chdir" );
 	    exit( 1 );
 	    }
 	}
@@ -601,7 +564,6 @@ main( int argc, char** argv )
 	if ( chdir( data_dir ) < 0 )
 	    {
 	    syslog( LOG_CRIT, "data_dir chdir - %m" );
-	    perror( "data_dir chdir" );
 	    exit( 1 );
 	    }
 	}
@@ -637,14 +599,18 @@ main( int argc, char** argv )
     /* Initialize the HTTP layer.  Got to do this before giving up root,
     ** so that we can bind to a privileged port.
     */
+	syslog( LOG_INFO, "before httpd_initialize");
     hs = httpd_initialize(
 	hostname,
 	gotv4 ? &sa4 : (httpd_sockaddr*) 0, gotv6 ? &sa6 : (httpd_sockaddr*) 0,
 	port, cgi_pattern, cgi_limit, charset, p3p, max_age, cwd, no_log, logfp,
 	no_symlink_check, do_vhost, do_global_passwd, url_pattern,
 	local_pattern, no_empty_referers );
-    if ( hs == (httpd_server*) 0 )
-	exit( 1 );
+    if ( hs == (httpd_server*) 0 ) {
+		network_error();
+		usleep(100);
+		exit( 1 );
+	}
 
     /* Set up the occasional timer. */
     if ( tmr_create( (struct timeval*) 0, occasional, JunkClientData, OCCASIONAL_TIME * 1000L, 1 ) == (Timer*) 0 )
@@ -753,14 +719,15 @@ main( int argc, char** argv )
 	    }
 
 	/* Do the fd watch. */
-	num_ready = fdwatch( tmr_mstimeout( &tv ) );
+	num_ready = fdwatch( INFTIM );
 	if ( num_ready < 0 )
 	    {
-	    if ( errno == EINTR || errno == EAGAIN )
+	    if ( errno == EINTR || errno == EAGAIN)
 		continue;       /* try again */
 	    syslog( LOG_ERR, "fdwatch - %m" );
 	    exit( 1 );
 	    }
+    // if (num_ready == -2) num_ready = 0;
 	(void) gettimeofday( &tv, (struct timezone*) 0 );
 
 	if ( num_ready == 0 )
@@ -794,7 +761,7 @@ main( int argc, char** argv )
 
 	/* Find the connections that need servicing. */
 	while ( ( c = (connecttab*) fdwatch_get_next_client_data() ) != (connecttab*) -1 )
-	    {
+	{
 	    if ( c == (connecttab*) 0 )
 		continue;
 	    hc = c->hc;
@@ -802,13 +769,22 @@ main( int argc, char** argv )
 		/* Something went wrong. */
 		clear_connection( c, &tv );
 	    else
-		switch ( c->conn_state )
+		{
+			syslog( LOG_INFO, "serving connection %d", c->hc);
+			switch ( c->conn_state )
 		    {
-		    case CNST_READING: handle_read( c, &tv ); break;
-		    case CNST_SENDING: handle_send( c, &tv ); break;
-		    case CNST_LINGERING: handle_linger( c, &tv ); break;
+				case CNST_READING:
+					handle_read( c, &tv );
+					break;
+				case CNST_SENDING:
+					handle_send( c, &tv );
+					break;
+				case CNST_LINGERING:
+					handle_linger( c, &tv );
+					break;
 		    }
-	    }
+		}
+	}
 	tmr_run( &tv );
 
 	if ( got_usr1 && ! terminate )
@@ -825,10 +801,8 @@ main( int argc, char** argv )
 	    }
 	}
 
-    /* The main loop terminated. */
     shut_down();
     syslog( LOG_NOTICE, "exiting" );
-    closelog();
     exit( 0 );
     }
 
@@ -876,9 +850,9 @@ parse_args( int argc, char** argv )
     hostname = (char*) 0;
     logfile = (char*) 0;
     pidfile = (char*) 0;
-    user = DEFAULT_USER;
-    charset = DEFAULT_CHARSET;
-    p3p = "";
+    user = (char*) DEFAULT_USER;
+    charset = (char*) DEFAULT_CHARSET;
+    p3p = (char*) "";
     max_age = -1;
     argn = 1;
     while ( argn < argc && argv[argn][0] == '-' )
@@ -1225,7 +1199,6 @@ e_strdup( char* oldstr )
     if ( newstr == (char*) 0 )
 	{
 	syslog( LOG_CRIT, "out of memory copying a string" );
-	(void) fprintf( stderr, "%s: out of memory copying a string\n", argv0 );
 	exit( 1 );
 	}
     return newstr;
@@ -1255,9 +1228,6 @@ lookup_hostname( httpd_sockaddr* sa4P, size_t sa4_len, int* gotv4P, httpd_sockad
 	syslog(
 	    LOG_CRIT, "getaddrinfo %.80s - %.80s",
 	    hostname, gai_strerror( gaierr ) );
-	(void) fprintf(
-	    stderr, "%s: getaddrinfo %s - %s\n",
-	    argv0, hostname, gai_strerror( gaierr ) );
 	exit( 1 );
 	}
 
@@ -1337,22 +1307,14 @@ lookup_hostname( httpd_sockaddr* sa4P, size_t sa4_len, int* gotv4P, httpd_sockad
 		syslog(
 		    LOG_CRIT, "gethostbyname %.80s - %.80s",
 		    hostname, hstrerror( h_errno ) );
-		(void) fprintf(
-		    stderr, "%s: gethostbyname %s - %s\n",
-		    argv0, hostname, hstrerror( h_errno ) );
 #else /* HAVE_HSTRERROR */
 		syslog( LOG_CRIT, "gethostbyname %.80s failed", hostname );
-		(void) fprintf(
-		    stderr, "%s: gethostbyname %s failed\n", argv0, hostname );
 #endif /* HAVE_HSTRERROR */
 		exit( 1 );
 		}
 	    if ( he->h_addrtype != AF_INET )
 		{
 		syslog( LOG_CRIT, "%.80s - non-IP network address", hostname );
-		(void) fprintf(
-		    stderr, "%s: %s - non-IP network address\n",
-		    argv0, hostname );
 		exit( 1 );
 		}
 	    (void) memmove(
@@ -1412,11 +1374,7 @@ read_throttlefile( char* throttlefile )
 	    min_limit = 0;
 	else
 	    {
-	    syslog( LOG_CRIT,
-		"unparsable line in %.80s - %.80s", throttlefile, buf );
-	    (void) fprintf( stderr,
-		"%s: unparsable line in %.80s - %.80s\n",
-		argv0, throttlefile, buf );
+	    syslog( LOG_CRIT, "unparsable line in %.80s - %.80s", throttlefile, buf );
 	    continue;
 	    }
 
@@ -1442,9 +1400,6 @@ read_throttlefile( char* throttlefile )
 	    if ( throttles == (throttletab*) 0 )
 		{
 		syslog( LOG_CRIT, "out of memory allocating a throttletab" );
-		(void) fprintf(
-		    stderr, "%s: out of memory allocating a throttletab\n",
-		    argv0 );
 		exit( 1 );
 		}
 	    }
@@ -1545,13 +1500,13 @@ handle_newconnect( struct timeval* tvP, int listen_fd )
 	    }
 
 	/* Get the connection. */
+    syslog( LOG_INFO, "before get_conn(%d)", listen_fd );
 	switch ( httpd_get_conn( hs, listen_fd, c->hc ) )
 	    {
 	    /* Some error happened.  Run the timers, then the
 	    ** existing connections.  Maybe the error will clear.
 	    */
 	    case GC_FAIL:
-	    tmr_run( tvP );
 	    return 0;
 
 	    /* No more connections to accept for now. */
@@ -1572,7 +1527,7 @@ handle_newconnect( struct timeval* tvP, int listen_fd )
 
 	/* Set the connection file descriptor to no-delay mode. */
 	httpd_set_ndelay( c->hc->conn_fd );
-
+    
 	fdwatch_add_fd( c->hc->conn_fd, c, FDW_READ );
 
 	++stats_connections;
@@ -1594,7 +1549,7 @@ handle_read( connecttab* c, struct timeval* tvP )
 	{
 	if ( hc->read_size > 5000 )
 	    {
-	    httpd_send_err( hc, 400, httpd_err400title, "", httpd_err400form, "" );
+	    httpd_send_err( hc, 400, httpd_err400title, (char*) "", httpd_err400form, (char*) "" );
 	    finish_connection( c, tvP );
 	    return;
 	    }
@@ -2021,26 +1976,7 @@ clear_connection( connecttab* c, struct timeval* tvP )
 	c->linger_timer = (Timer*) 0;
 	c->hc->should_linger = 0;
 	}
-    if ( c->hc->should_linger )
-	{
-	if ( c->conn_state != CNST_PAUSING )
-	    fdwatch_del_fd( c->hc->conn_fd );
-	c->conn_state = CNST_LINGERING;
-	shutdown( c->hc->conn_fd, SHUT_WR );
-	fdwatch_add_fd( c->hc->conn_fd, c, FDW_READ );
-	client_data.p = c;
-	if ( c->linger_timer != (Timer*) 0 )
-	    syslog( LOG_ERR, "replacing non-null linger_timer!" );
-	c->linger_timer = tmr_create(
-	    tvP, linger_clear_connection, client_data, LINGER_TIME, 0 );
-	if ( c->linger_timer == (Timer*) 0 )
-	    {
-	    syslog( LOG_CRIT, "tmr_create(linger_clear_connection) failed" );
-	    exit( 1 );
-	    }
-	}
-    else
-	really_clear_connection( c, tvP );
+    really_clear_connection( c, tvP );
     }
 
 
@@ -2144,7 +2080,7 @@ show_stats( ClientData client_data, struct timeval* nowP )
 #endif /* STATS_TIME */
 
 
-/* Generate debugging statistics syslog messages for all packages. */
+/* Generate debugging statistics messages for all packages. */
 static void
 logstats( struct timeval* nowP )
     {
@@ -2164,7 +2100,7 @@ logstats( struct timeval* nowP )
 	stats_secs = 1;	/* fudge */
     stats_time = now;
     syslog( LOG_INFO,
-	"up %ld seconds, stats for %ld seconds:", up_secs, stats_secs );
+	    "  up %ld seconds, stats for %ld seconds:", up_secs, stats_secs );
 
     thttpd_logstats( stats_secs );
     httpd_logstats( stats_secs );
@@ -2174,7 +2110,7 @@ logstats( struct timeval* nowP )
     }
 
 
-/* Generate debugging statistics syslog message. */
+/* Generate debugging statistics message. */
 static void
 thttpd_logstats( long secs )
     {
diff --git a/timers.c b/timers.c
--- a/timers.c
+++ b/timers.c
@@ -29,7 +29,7 @@
 
 #include <stdlib.h>
 #include <stdio.h>
-#include <syslog.h>
+#include "my_syslog.h"
 
 #include "timers.h"
 
diff --git a/timers.h b/timers.h
--- a/timers.h
+++ b/timers.h
@@ -64,6 +64,9 @@ typedef struct TimerStruct {
     int hash;
     } Timer;
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 /* Initialize the timer package. */
 extern void tmr_init( void );
 
@@ -105,5 +108,8 @@ extern void tmr_destroy( void );
 
 /* Generate debugging statistics syslog message. */
 extern void tmr_logstats( long secs );
+#ifdef __cplusplus
+}
+#endif
 
 #endif /* _TIMERS_H_ */
