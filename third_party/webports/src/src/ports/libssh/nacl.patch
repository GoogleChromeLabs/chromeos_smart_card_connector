diff --git a/ConfigureChecks.cmake b/ConfigureChecks.cmake
--- a/ConfigureChecks.cmake
+++ b/ConfigureChecks.cmake
@@ -215,6 +215,6 @@ if (WITH_GSSAPI AND NOT GSSAPI_FOUND)
 endif (WITH_GSSAPI AND NOT GSSAPI_FOUND)
 
 # ENDIAN
-if (NOT WIN32)
+if (NOT WIN32 AND NOT PNACL)
     test_big_endian(WORDS_BIGENDIAN)
-endif (NOT WIN32)
+endif (NOT WIN32 AND NOT PNACL)
diff --git a/cmake/Modules/DefineCompilerFlags.cmake b/cmake/Modules/DefineCompilerFlags.cmake
--- a/cmake/Modules/DefineCompilerFlags.cmake
+++ b/cmake/Modules/DefineCompilerFlags.cmake
@@ -10,7 +10,11 @@ if (UNIX AND NOT WIN32)
     if (${CMAKE_C_COMPILER_ID} MATCHES "(GNU|Clang)")
 
         # add -Wconversion ?
-        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -pedantic -pedantic-errors")
+        # TODO(sbc): revert this change once these issues get fixed
+        # https://code.google.com/p/nativeclient/issues/detail?id=3794
+        # https://code.google.com/p/nativeclient/issues/detail?id=781
+        #set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -pedantic -pedantic-errors")
+        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -fno-builtin")
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wshadow -Wmissing-prototypes -Wdeclaration-after-statement")
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wunused -Wfloat-equal -Wpointer-arith -Wwrite-strings -Wformat-security")
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wmissing-format-attribute")
@@ -21,10 +25,12 @@ if (UNIX AND NOT WIN32)
             set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
         endif (WITH_FPIC)
 
-        check_c_compiler_flag_ssp("-fstack-protector" WITH_STACK_PROTECTOR)
-        if (WITH_STACK_PROTECTOR)
-            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector")
-        endif (WITH_STACK_PROTECTOR)
+        if (NOT NACL)
+            check_c_compiler_flag_ssp("-fstack-protector" WITH_STACK_PROTECTOR)
+            if (WITH_STACK_PROTECTOR)
+                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector")
+            endif (WITH_STACK_PROTECTOR)
+        endif ()
 
         if (CMAKE_BUILD_TYPE)
             string(TOLOWER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_LOWER)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -93,10 +93,12 @@ set(LIBSSH_LINK_LIBRARIES
   CACHE INTERNAL "libssh link libraries"
 )
 
+if (WITH_SHARED_LIB)
 set(LIBSSH_SHARED_LIBRARY
   ssh_shared
   CACHE INTERNAL "libssh shared library"
 )
+endif (WITH_SHARED_LIB)
 
 if (WITH_STATIC_LIB)
   set(LIBSSH_STATIC_LIBRARY
@@ -217,6 +219,7 @@ include_directories(
   ${LIBSSH_PRIVATE_INCLUDE_DIRS}
 )
 
+if (WITH_SHARED_LIB)
 add_library(${LIBSSH_SHARED_LIBRARY} SHARED ${libssh_SRCS})
 
 target_link_libraries(${LIBSSH_SHARED_LIBRARY} ${LIBSSH_LINK_LIBRARIES})
@@ -247,6 +250,7 @@ install(
   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
   COMPONENT libraries
 )
+endif (WITH_SHARED_LIB)
 
 if (WITH_STATIC_LIB)
   add_library(${LIBSSH_STATIC_LIBRARY} STATIC ${libssh_SRCS})
diff --git a/src/threads/CMakeLists.txt b/src/threads/CMakeLists.txt
--- a/src/threads/CMakeLists.txt
+++ b/src/threads/CMakeLists.txt
@@ -11,10 +11,12 @@ set(LIBSSH_THREADS_PRIVATE_INCLUDE_DIRS
     ${CMAKE_BINARY_DIR}
 )
 
+if (WITH_SHARED_LIB)
 set(LIBSSH_THREADS_SHARED_LIBRARY
   ssh_threads_shared
   CACHE INTERNAL "libssh threads shared library"
 )
+endif (WITH_SHARED_LIB)
 
 if (WITH_STATIC_LIB)
   set(LIBSSH_THREADS_STATIC_LIBRARY
@@ -53,6 +55,7 @@ include_directories(
   ${LIBSSH_THREADS_PRIVATE_INCLUDE_DIRS}
 )
 
+if (WITH_SHARED_LIB)
 add_library(${LIBSSH_THREADS_SHARED_LIBRARY} SHARED ${libssh_threads_SRCS})
 
 target_link_libraries(${LIBSSH_THREADS_SHARED_LIBRARY} ${LIBSSH_THREADS_LINK_LIBRARIES})
@@ -82,6 +85,7 @@ install(
   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
   COMPONENT libraries
 )
+endif (WITH_SHARED_LIB)
 
 if (WITH_STATIC_LIB)
   add_library(${LIBSSH_THREADS_STATIC_LIBRARY} STATIC ${libssh_threads_SRCS})
