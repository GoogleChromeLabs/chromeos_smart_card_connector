syntax = "proto3";

package jscomp;

import "src/com/google/javascript/rhino/typed_ast/optimization_jsdoc.proto";
import "src/com/google/javascript/rhino/typed_ast/source_file.proto";
import "src/com/google/javascript/rhino/typed_ast/types.proto";

option java_package = "com.google.javascript.jscomp.serialization";
option java_multiple_files = true;

// All of these proto definitions are in flux.  Please don't depend on them.
message TypedAst {
  // required
  TypePool type_pool = 1;
  // required
  StringPoolProto string_pool = 2;

  repeated LazyAst extern_ast = 3;
  repeated LazyAst code_ast = 4;

  SourceFilePool source_file_pool = 5;
  ExternsSummary externs_summary = 6;

  message List {
    repeated TypedAst typed_asts = 1;
  }
}

message LazyAst {
  // Binary representation of an AstNode. They are encoded as 'bytes' to
  // decrease memory usage during serialization and deserialization and allow
  // lazy parsing of each AstNode.
  bytes script = 1;
  // 1-based index into TypedAst::source_file_pool
  uint32 source_file = 2;
}

// Keep this in sync with the TypedAst proto.
// This is only used for debugging as proto printing
// tools produce unreadable bytecode for a LazyAst.
message NonLazyTypedAst {
  // required
  TypePool type_pool = 1;
  // required
  StringPoolProto string_pool = 2;

  repeated NonLazyAst extern_ast = 3;
  repeated NonLazyAst code_ast = 4;

  SourceFilePool source_file_pool = 5;
  ExternsSummary externs_summary = 6;

  message List {
    repeated NonLazyTypedAst typed_asts = 1;
  }
}

// Keep this in sync with the LazyAst proto
message NonLazyAst {
  AstNode script = 1;
  // 1-based index into TypedAst::source_file_pool
  uint32 source_file = 2;
}

message StringPoolProto {
  // the "0th" index must always be the empty string so "0" may be used as a
  // default for "no string"
  repeated bytes strings = 1;

  // The number of codepoints in the longest pool entry.
  int32 max_length = 2;
}

message ExternsSummary {
  repeated int32 prop_name_ptr = 1;
}

message AstNode {
  NodeKind kind = 1;
  repeated AstNode child = 2;
  oneof value {
    uint32 string_value_pointer = 3;
    double double_value = 4;
    TemplateStringValue template_string_value = 8;
  }

  // Relative line number compared to previous AST node in pre-order traversal.
  // Relative to line 0 for the first AST node
  sint32 relative_line = 5;
  // Relative column compared to previous AST node in pre-order traversal
  // Relative to column 0 for the first AST node
  sint32 relative_column = 6;
  OptimizationJsdoc jsdoc = 7;
  // the name of this node in the original source pre-rewriting. default value
  // '0' is equivalent to no original name.
  // TODO(b/183734530): delete this field
  uint32 original_name_pointer = 9;

  repeated NodeProperty boolean_property = 14;
  TypePointer type = 15;

  // pointer into the TypedAst's SourceFilePool
  // 0 is equivalent to 'not set' and assumed to be equal to the source_file of
  // the parent node. Other pointer indices are 1-based.
  // TODO(b/186431141): for library-level TypedAST, try to enforce that all
  // nodes in a JavascriptFile have the same associated code location.
  uint32 source_file = 16;
}

message TemplateStringValue {
  uint32 raw_string_pointer = 1;
  /**
   * -1 if the raw string contains an uncookable escape sequence.
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#es2018_revision_of_illegal_escape_sequences
   */
  int32 cooked_string_pointer = 2;
}

enum NodeKind {
  NODE_KIND_UNSPECIFIED = 0;

  // Expressions
  NUMBER_LITERAL = 201;
  STRING_LITERAL = 202;
  BIGINT_LITERAL = 203;
  TRUE = 204;
  FALSE = 205;
  NULL = 206;
  REGEX_LITERAL = 207;
  ARRAY_LITERAL = 208;
  OBJECT_LITERAL = 209;
  TEMPLATELIT = 210;
  TAGGED_TEMPLATELIT = 211;

  IDENTIFIER = 214;
  THIS = 215;
  ASSIGNMENT = 216;
  COMMA = 217;
  CALL = 218;
  NEW = 219;
  YIELD = 220;
  AWAIT = 221;
  BOOLEAN_OR = 223;
  BOOLEAN_AND = 224;
  HOOK = 225;
  PROPERTY_ACCESS = 226;
  ELEMENT_ACCESS = 227;

  LESS_THAN = 228;
  LESS_THAN_EQUAL = 229;
  GREATER_THAN = 230;
  GREATER_THAN_EQUAL = 231;
  EQUAL = 232;
  TRIPLE_EQUAL = 233;
  NOT_EQUAL = 234;
  NOT_TRIPLE_EQUAL = 235;
  NOT = 236;
  TYPEOF = 237;
  INSTANCEOF = 238;
  IN = 239;

  LEFT_SHIFT = 240;
  RIGHT_SHIFT = 241;
  UNSIGNED_RIGHT_SHIFT = 242;

  ADD = 243;
  SUBTRACT = 244;
  MULTIPLY = 245;
  DIVIDE = 246;
  MODULO = 247;
  EXPONENT = 248;

  ASSIGN_ADD = 249;
  ASSIGN_SUBTRACT = 250;
  ASSIGN_MULTIPLY = 251;
  ASSIGN_DIVIDE = 252;
  ASSIGN_MODULO = 253;
  ASSIGN_EXPONENT = 254;
  ASSIGN_BITWISE_OR = 255;
  ASSIGN_BITWISE_AND = 256;
  ASSIGN_BITWISE_XOR = 257;
  ASSIGN_LEFT_SHIFT = 258;
  ASSIGN_RIGHT_SHIFT = 259;
  ASSIGN_UNSIGNED_RIGHT_SHIFT = 260;

  PRE_INCREMENT = 261;
  POST_INCREMENT = 262;
  PRE_DECREMENT = 263;
  POST_DECREMENT = 264;

  POSITIVE = 265;
  NEGATIVE = 266;

  BITWISE_OR = 267;
  BITWISE_AND = 268;
  BITWISE_XOR = 269;
  BITWISE_NOT = 270;

  VOID = 271;
  DELETE = 272;

  NEW_TARGET = 273;
  COMPUTED_PROP = 274;
  IMPORT_META = 275;
  OPTCHAIN_PROPERTY_ACCESS = 276;
  OPTCHAIN_CALL = 277;
  OPTCHAIN_ELEMENT_ACCESS = 278;
  COALESCE = 279;
  DYNAMIC_IMPORT = 280;
  ASSIGN_OR = 281;
  ASSIGN_AND = 282;
  ASSIGN_COALESCE = 283;
  // Next expression: 284

  // Statements
  BREAK_STATEMENT = 400;
  CONTINUE_STATEMENT = 401;
  DEBUGGER_STATEMENT = 402;
  DO_STATEMENT = 403;
  EXPRESSION_STATEMENT = 404;
  FOR_AWAIT_OF_STATEMENT = 405;
  FOR_IN_STATEMENT = 406;
  FOR_OF_STATEMENT = 407;
  FOR_STATEMENT = 408;
  IF_STATEMENT = 409;
  LABELED_STATEMENT = 410;
  RETURN_STATEMENT = 411;
  SWITCH_STATEMENT = 412;
  THROW_STATEMENT = 413;
  TRY_STATEMENT = 414;
  WHILE_STATEMENT = 415;
  BLOCK = 416;
  EMPTY = 417;
  IMPORT = 418;
  EXPORT = 419;
  WITH = 420;
  // Next statement: 421

  VAR_DECLARATION = 500;
  LET_DECLARATION = 501;
  CONST_DECLARATION = 502;
  FUNCTION_LITERAL = 503;
  CLASS_LITERAL = 504;
  // Next declaration: 505

  // Other
  SOURCE_FILE = 600;
  CASE = 601;
  DEFAULT_CASE = 602;
  CATCH = 603;
  CLASS_MEMBERS = 604;
  METHOD_DECLARATION = 605;
  PARAMETER_LIST = 606;
  RENAMABLE_STRING_KEY = 607;
  QUOTED_STRING_KEY = 608;
  LABELED_NAME = 609;
  ARRAY_PATTERN = 610;
  OBJECT_PATTERN = 611;
  DESTRUCTURING_LHS = 612;
  TEMPLATELIT_SUB = 613;
  TEMPLATELIT_STRING = 614;
  SUPER = 615;
  DEFAULT_VALUE = 616;
  IMPORT_SPECS = 619;
  IMPORT_SPEC = 620;
  IMPORT_STAR = 621;
  EXPORT_SPECS = 622;
  EXPORT_SPEC = 623;
  ITER_REST = 624;
  ITER_SPREAD = 625;
  OBJECT_REST = 626;
  OBJECT_SPREAD = 627;

  RENAMABLE_GETTER_DEF = 628;
  QUOTED_GETTER_DEF = 629;
  RENAMABLE_SETTER_DEF = 630;
  QUOTED_SETTER_DEF = 631;

  MODULE_BODY = 632;
  FIELD_DECLARATION = 633;
  COMPUTED_PROP_FIELD = 634;

  // Next other: 635
}

// Rename to `BooleanNodeProperty` if/when we also need non-boolean properties
enum NodeProperty {
  NODE_PROPERTY_UNSPECIFIED = 0;

  // Is this Node within parentheses
  IS_PARENTHESIZED = 1;
  // A synthetic block. Used to make processing simpler, and does not represent
  // a real block in the source.
  SYNTHETIC = 3;
  // Used to indicate BLOCK that is added
  ADDED_BLOCK = 4;
  // The variable or property is constant.
  // TODO(lukes): either document the differences or otherwise reconcile with
  // CONSTANT_VAR_FLAGS
  IS_CONSTANT_NAME = 6;
  // The variable creates a namespace.
  IS_NAMESPACE = 7;
  // ES5 distinguishes between direct and indirect calls to eval.
  DIRECT_EVAL = 9;
  // A CALL without an explicit "this" value.
  FREE_CALL = 10;
  // Whether a STRING node contains a \v vertical tab escape. This is a total
  // hack. See comments in IRFactory about this.
  SLASH_V = 11;
  // An object that's used for goog.object.reflect-style reflection.
  REFLECTED_OBJECT = 12;
  // Set if class member definition is static
  STATIC_MEMBER = 13;
  // Set if the node is a Generator function or member method.
  GENERATOR_FN = 14;
  // Set if the node is an arrow function.
  ARROW_FN = 15;
  // http://tc39.github.io/ecmascript-asyncawait/
  ASYNC_FN = 16;
  // Set if a yield is a "yield all"
  YIELD_ALL = 17;
  // Set if a export is a "default" export
  EXPORT_DEFAULT = 18;
  // Set if an export is a "*"
  EXPORT_ALL_FROM = 19;
  // A variable is inferred or declared as const meaning it is only ever
  // assigned once at its declaration site. This is an int prop that holds a
  // bitset of {@link ConstantVarFlags} values.
  CONSTANT_VAR_FLAGS = 20;
  // Used by the ES6-to-ES3 translator.
  IS_GENERATOR_MARKER = 21;
  // Used by the ES6-to-ES3 translator.
  IS_GENERATOR_SAFE = 22;
  // A computed property that has the method syntax
  //   ( [prop]() {...} )
  // rather than the property definition syntax
  //   ( [prop]: value ).
  COMPUTED_PROP_METHOD = 23;
  // A computed property in a getter, e.g. var obj = { get [prop]() {...} };
  COMPUTED_PROP_GETTER = 24;
  // A computed property in a setter, e.g. var obj = 32;
  COMPUTED_PROP_SETTER = 25;
  // A computed property that's a variable, e.g. [prop]: string;
  COMPUTED_PROP_VARIABLE = 26;
  // Indicates that this epxression was casted but we don't necessarily know to
  // which type
  COLOR_FROM_CAST = 28;
  // Indicates the node should not be indexed by analysis tools.
  NON_INDEXABLE = 29;
  // Indicates that a SCRIPT node is a goog.module. Remains set after the
  // goog.module is desugared.
  GOOG_MODULE = 30;
  // Indicates that a SCRIPT represents a transpiled file
  TRANSPILED = 34;
  // For passes that work only on deleted funs.
  DELETED = 35;
  // Indicates that the node is an alias or a name from goog.require'd module or
  // ES6 module. Aliases are desugared and inlined by compiler passes but we
  // need to preserve them for building index.
  MODULE_ALIAS = 36;
  // Mark a parameter as unused. Used to defer work from RemovedUnusedVars to
  // OptimizeParameters.
  IS_UNUSED_PARAMETER = 37;
  // Mark a property as a module export so that collase properties can act on
  // it.
  MODULE_EXPORT = 38;
  // Indicates that a property {x:x} was originally parsed as {x}.
  IS_SHORTHAND_PROPERTY = 39;
  // Indicates that a SCRIPT node is or was an ES module. Remains set after the
  // module is rewritten.
  ES6_MODULE = 40;
  // Indicate that a OPTCHAIN_GETPROP, OPTCHAIN_GETELEM, or OPTCHAIN_CALL is the
  // start of an optional chain.
  START_OF_OPT_CHAIN = 41;
  // Indicates a trailing comma in an array literal, object literal, parameter
  // list, or argument list
  TRAILING_COMMA = 42;
  // Whether this variable is inferred to be constant
  // TODO(b/183734515): it probably doesn't make sense to serialize this at the
  // library level. delete it.
  IS_INFERRED_CONSTANT = 43;
  // Whether this variable is declared to be constant
  // TODO(b/183734515): it probably doesn't make sense to serialize this at the
  // library level. delete it.
  IS_DECLARED_CONSTANT = 44;
  // Indicates that an externs name declaration was synthesized by the compiler
  // because the name was referenced without being declared
  SYNTHESIZED_UNFULFILLED_NAME_DECLARATION = 45;
}
