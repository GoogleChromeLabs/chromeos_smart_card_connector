name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # The version of libstdc++ to install for coverage builds.
  COVERAGE_LIBSTDCPP_VERSION: 10

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # Update the Apt cache, since the default state in Github Actions VM might
    # be stalled, causing 404 errors when trying to install packages later.
    - name: Apt update
      run: sudo apt-get update

    - name: Set up Python 3
      uses: actions/setup-python@v3.1.2
      with:
        python-version: 3.9
        cache: pip

    # Building in the coverage mode requires LLVM and Clang, as well as 32-bit
    # cross-compile versions of standard C and C++ libraries (needed as we're
    # building code in 32-bit mode on the 64-bit host).
    - name: Install coverage toolchain
      run: >
        sudo apt-get install -y
        build-essential
        llvm
        clang
        libc6-dev-i386
        libstdc++-${COVERAGE_LIBSTDCPP_VERSION}-dev-i386-cross

    - name: Initialize env
      run: env/initialize.sh

    - name: Compile in WebAssembly mode
      run: >
        source env/activate &&
          TOOLCHAIN=emscripten make -j30

    - name: Test in WebAssembly mode
      run: >
        source env/activate &&
          TOOLCHAIN=emscripten make test

    - name: Compile in NaCl mode
      run: >
        source env/activate &&
          source env/python2_venv/bin/activate &&
          TOOLCHAIN=pnacl make

    # When building for coverage, explicitly tell Clang to use the right include
    # path, because Clang's heuristics often fail to deduce it automatically.
    - name: Build coverage report
      id: build-coverage
      env:
        CPLUS_INCLUDE_PATH: /usr/i686-linux-gnu/include/c++/${{ env.COVERAGE_LIBSTDCPP_VERSION }}/i686-linux-gnu/
      run: |
        ./coverage-report.sh | tee coverage-output.txt
        echo "::set-output name=LINE_COVERAGE_PERCENT::$(
          scripts/parse-coverage-output.py <coverage-output.txt
        )"

    # Post an autogenerated comment on the Pull Request (in case the action is
    # run because of one).
    - name: Comment on pull request
      if: ${{ github.event.issue.pull_request }}
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          \<Continuous Integration\>: All tests passed.
          C/C++ test coverage: ${{ steps.build-coverage.outputs.LINE_COVERAGE_PERCENT }} lines.
